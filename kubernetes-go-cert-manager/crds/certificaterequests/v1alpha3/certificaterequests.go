// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha3

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A CertificateRequest is used to request a signed certificate from one of the configured issuers.
//  All fields within the CertificateRequest's `spec` are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its `status.state` field.
//  A CertificateRequest is a 'one-shot' resource, meaning it represents a single point in time request for a certificate and cannot be re-used.
type CertificateRequest struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	Metadata metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// Desired state of the CertificateRequest resource.
	Spec CertificateRequestSpecPtrOutput `pulumi:"spec"`
	// Status of the CertificateRequest. This is set and managed automatically.
	Status CertificateRequestStatusPtrOutput `pulumi:"status"`
}

// NewCertificateRequest registers a new resource with the given unique name, arguments, and options.
func NewCertificateRequest(ctx *pulumi.Context,
	name string, args *CertificateRequestArgs, opts ...pulumi.ResourceOption) (*CertificateRequest, error) {
	if args == nil {
		args = &CertificateRequestArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("cert-manager.io/v1alpha3")
	args.Kind = pulumi.StringPtr("CertificateRequest")
	var resource CertificateRequest
	err := ctx.RegisterResource("kubernetes:cert-manager.io/v1alpha3:CertificateRequest", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateRequest gets an existing CertificateRequest resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateRequest(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateRequestState, opts ...pulumi.ResourceOption) (*CertificateRequest, error) {
	var resource CertificateRequest
	err := ctx.ReadResource("kubernetes:cert-manager.io/v1alpha3:CertificateRequest", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateRequest resources.
type certificateRequestState struct {
	ApiVersion *string `pulumi:"apiVersion"`
	Kind *string `pulumi:"kind"`
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Desired state of the CertificateRequest resource.
	Spec *CertificateRequestSpec `pulumi:"spec"`
	// Status of the CertificateRequest. This is set and managed automatically.
	Status *CertificateRequestStatus `pulumi:"status"`
}

type CertificateRequestState struct {
	ApiVersion pulumi.StringPtrInput
	Kind pulumi.StringPtrInput
	Metadata metav1.ObjectMetaPtrInput
	// Desired state of the CertificateRequest resource.
	Spec CertificateRequestSpecPtrInput
	// Status of the CertificateRequest. This is set and managed automatically.
	Status CertificateRequestStatusPtrInput
}

func (CertificateRequestState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateRequestState)(nil)).Elem()
}

type certificateRequestArgs struct {
	ApiVersion *string `pulumi:"apiVersion"`
	Kind *string `pulumi:"kind"`
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Desired state of the CertificateRequest resource.
	Spec *CertificateRequestSpec `pulumi:"spec"`
	// Status of the CertificateRequest. This is set and managed automatically.
	Status *CertificateRequestStatus `pulumi:"status"`
}

// The set of arguments for constructing a CertificateRequest resource.
type CertificateRequestArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind pulumi.StringPtrInput
	Metadata metav1.ObjectMetaPtrInput
	// Desired state of the CertificateRequest resource.
	Spec CertificateRequestSpecPtrInput
	// Status of the CertificateRequest. This is set and managed automatically.
	Status CertificateRequestStatusPtrInput
}

func (CertificateRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateRequestArgs)(nil)).Elem()
}

// A CertificateRequest is used to request a signed certificate from one of the configured issuers.
//  All fields within the CertificateRequest's `spec` are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its `status.state` field.
//  A CertificateRequest is a 'one-shot' resource, meaning it represents a single point in time request for a certificate and cannot be re-used.
type CertificateRequestType struct {
	ApiVersion *string `pulumi:"apiVersion"`
	Kind *string `pulumi:"kind"`
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Desired state of the CertificateRequest resource.
	Spec *CertificateRequestSpec `pulumi:"spec"`
	// Status of the CertificateRequest. This is set and managed automatically.
	Status *CertificateRequestStatus `pulumi:"status"`
}

// CertificateRequestTypeInput is an input type that accepts CertificateRequestTypeArgs and CertificateRequestTypeOutput values.
// You can construct a concrete instance of `CertificateRequestTypeInput` via:
//
//          CertificateRequestTypeArgs{...}
type CertificateRequestTypeInput interface {
	pulumi.Input

	ToCertificateRequestTypeOutput() CertificateRequestTypeOutput
	ToCertificateRequestTypeOutputWithContext(context.Context) CertificateRequestTypeOutput
}

// A CertificateRequest is used to request a signed certificate from one of the configured issuers.
//  All fields within the CertificateRequest's `spec` are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its `status.state` field.
//  A CertificateRequest is a 'one-shot' resource, meaning it represents a single point in time request for a certificate and cannot be re-used.
type CertificateRequestTypeArgs struct {
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Desired state of the CertificateRequest resource.
	Spec CertificateRequestSpecPtrInput `pulumi:"spec"`
	// Status of the CertificateRequest. This is set and managed automatically.
	Status CertificateRequestStatusPtrInput `pulumi:"status"`
}

func (CertificateRequestTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateRequestType)(nil)).Elem()
}

func (i CertificateRequestTypeArgs) ToCertificateRequestTypeOutput() CertificateRequestTypeOutput {
	return i.ToCertificateRequestTypeOutputWithContext(context.Background())
}

func (i CertificateRequestTypeArgs) ToCertificateRequestTypeOutputWithContext(ctx context.Context) CertificateRequestTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateRequestTypeOutput)
}

// A CertificateRequest is used to request a signed certificate from one of the configured issuers.
//  All fields within the CertificateRequest's `spec` are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its `status.state` field.
//  A CertificateRequest is a 'one-shot' resource, meaning it represents a single point in time request for a certificate and cannot be re-used.
type CertificateRequestTypeOutput struct { *pulumi.OutputState }

func (CertificateRequestTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateRequestType)(nil)).Elem()
}

func (o CertificateRequestTypeOutput) ToCertificateRequestTypeOutput() CertificateRequestTypeOutput {
	return o
}

func (o CertificateRequestTypeOutput) ToCertificateRequestTypeOutputWithContext(ctx context.Context) CertificateRequestTypeOutput {
	return o
}

func (o CertificateRequestTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateRequestType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o CertificateRequestTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateRequestType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o CertificateRequestTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func (v CertificateRequestType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Desired state of the CertificateRequest resource.
func (o CertificateRequestTypeOutput) Spec() CertificateRequestSpecPtrOutput {
	return o.ApplyT(func (v CertificateRequestType) *CertificateRequestSpec { return v.Spec }).(CertificateRequestSpecPtrOutput)
}

// Status of the CertificateRequest. This is set and managed automatically.
func (o CertificateRequestTypeOutput) Status() CertificateRequestStatusPtrOutput {
	return o.ApplyT(func (v CertificateRequestType) *CertificateRequestStatus { return v.Status }).(CertificateRequestStatusPtrOutput)
}

// Desired state of the CertificateRequest resource.
type CertificateRequestSpec struct {
	// The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.
	Csr string `pulumi:"csr"`
	// The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.
	Duration *string `pulumi:"duration"`
	// IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the `cert sign` usage to the list of `usages`.
	IsCA *bool `pulumi:"isCA"`
	// IssuerRef is a reference to the issuer for this CertificateRequest.  If the 'kind' field is not set, or set to 'Issuer', an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the 'kind' field is set to 'ClusterIssuer', a ClusterIssuer with the provided name will be used. The 'name' field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to 'cert-manager.io' if empty.
	IssuerRef CertificateRequestSpecIssuerRef `pulumi:"issuerRef"`
	// Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.
	Usages []string `pulumi:"usages"`
}

// CertificateRequestSpecInput is an input type that accepts CertificateRequestSpecArgs and CertificateRequestSpecOutput values.
// You can construct a concrete instance of `CertificateRequestSpecInput` via:
//
//          CertificateRequestSpecArgs{...}
type CertificateRequestSpecInput interface {
	pulumi.Input

	ToCertificateRequestSpecOutput() CertificateRequestSpecOutput
	ToCertificateRequestSpecOutputWithContext(context.Context) CertificateRequestSpecOutput
}

// Desired state of the CertificateRequest resource.
type CertificateRequestSpecArgs struct {
	// The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.
	Csr pulumi.StringInput `pulumi:"csr"`
	// The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.
	Duration pulumi.StringPtrInput `pulumi:"duration"`
	// IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the `cert sign` usage to the list of `usages`.
	IsCA pulumi.BoolPtrInput `pulumi:"isCA"`
	// IssuerRef is a reference to the issuer for this CertificateRequest.  If the 'kind' field is not set, or set to 'Issuer', an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the 'kind' field is set to 'ClusterIssuer', a ClusterIssuer with the provided name will be used. The 'name' field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to 'cert-manager.io' if empty.
	IssuerRef CertificateRequestSpecIssuerRefInput `pulumi:"issuerRef"`
	// Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.
	Usages pulumi.StringArrayInput `pulumi:"usages"`
}

func (CertificateRequestSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateRequestSpec)(nil)).Elem()
}

func (i CertificateRequestSpecArgs) ToCertificateRequestSpecOutput() CertificateRequestSpecOutput {
	return i.ToCertificateRequestSpecOutputWithContext(context.Background())
}

func (i CertificateRequestSpecArgs) ToCertificateRequestSpecOutputWithContext(ctx context.Context) CertificateRequestSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateRequestSpecOutput)
}

func (i CertificateRequestSpecArgs) ToCertificateRequestSpecPtrOutput() CertificateRequestSpecPtrOutput {
	return i.ToCertificateRequestSpecPtrOutputWithContext(context.Background())
}

func (i CertificateRequestSpecArgs) ToCertificateRequestSpecPtrOutputWithContext(ctx context.Context) CertificateRequestSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateRequestSpecOutput).ToCertificateRequestSpecPtrOutputWithContext(ctx)
}

// CertificateRequestSpecPtrInput is an input type that accepts CertificateRequestSpecArgs, CertificateRequestSpecPtr and CertificateRequestSpecPtrOutput values.
// You can construct a concrete instance of `CertificateRequestSpecPtrInput` via:
//
//          CertificateRequestSpecArgs{...}
//
//  or:
//
//          nil
type CertificateRequestSpecPtrInput interface {
	pulumi.Input

	ToCertificateRequestSpecPtrOutput() CertificateRequestSpecPtrOutput
	ToCertificateRequestSpecPtrOutputWithContext(context.Context) CertificateRequestSpecPtrOutput
}

type certificateRequestSpecPtrType CertificateRequestSpecArgs

func CertificateRequestSpecPtr(v *CertificateRequestSpecArgs) CertificateRequestSpecPtrInput {	return (*certificateRequestSpecPtrType)(v)
}

func (*certificateRequestSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateRequestSpec)(nil)).Elem()
}

func (i *certificateRequestSpecPtrType) ToCertificateRequestSpecPtrOutput() CertificateRequestSpecPtrOutput {
	return i.ToCertificateRequestSpecPtrOutputWithContext(context.Background())
}

func (i *certificateRequestSpecPtrType) ToCertificateRequestSpecPtrOutputWithContext(ctx context.Context) CertificateRequestSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateRequestSpecPtrOutput)
}

// Desired state of the CertificateRequest resource.
type CertificateRequestSpecOutput struct { *pulumi.OutputState }

func (CertificateRequestSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateRequestSpec)(nil)).Elem()
}

func (o CertificateRequestSpecOutput) ToCertificateRequestSpecOutput() CertificateRequestSpecOutput {
	return o
}

func (o CertificateRequestSpecOutput) ToCertificateRequestSpecOutputWithContext(ctx context.Context) CertificateRequestSpecOutput {
	return o
}

func (o CertificateRequestSpecOutput) ToCertificateRequestSpecPtrOutput() CertificateRequestSpecPtrOutput {
	return o.ToCertificateRequestSpecPtrOutputWithContext(context.Background())
}

func (o CertificateRequestSpecOutput) ToCertificateRequestSpecPtrOutputWithContext(ctx context.Context) CertificateRequestSpecPtrOutput {
	return o.ApplyT(func(v CertificateRequestSpec) *CertificateRequestSpec {
		return &v
	}).(CertificateRequestSpecPtrOutput)
}
// The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.
func (o CertificateRequestSpecOutput) Csr() pulumi.StringOutput {
	return o.ApplyT(func (v CertificateRequestSpec) string { return v.Csr }).(pulumi.StringOutput)
}

// The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.
func (o CertificateRequestSpecOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateRequestSpec) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

// IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the `cert sign` usage to the list of `usages`.
func (o CertificateRequestSpecOutput) IsCA() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v CertificateRequestSpec) *bool { return v.IsCA }).(pulumi.BoolPtrOutput)
}

// IssuerRef is a reference to the issuer for this CertificateRequest.  If the 'kind' field is not set, or set to 'Issuer', an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the 'kind' field is set to 'ClusterIssuer', a ClusterIssuer with the provided name will be used. The 'name' field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to 'cert-manager.io' if empty.
func (o CertificateRequestSpecOutput) IssuerRef() CertificateRequestSpecIssuerRefOutput {
	return o.ApplyT(func (v CertificateRequestSpec) CertificateRequestSpecIssuerRef { return v.IssuerRef }).(CertificateRequestSpecIssuerRefOutput)
}

// Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.
func (o CertificateRequestSpecOutput) Usages() pulumi.StringArrayOutput {
	return o.ApplyT(func (v CertificateRequestSpec) []string { return v.Usages }).(pulumi.StringArrayOutput)
}

type CertificateRequestSpecPtrOutput struct { *pulumi.OutputState }

func (CertificateRequestSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateRequestSpec)(nil)).Elem()
}

func (o CertificateRequestSpecPtrOutput) ToCertificateRequestSpecPtrOutput() CertificateRequestSpecPtrOutput {
	return o
}

func (o CertificateRequestSpecPtrOutput) ToCertificateRequestSpecPtrOutputWithContext(ctx context.Context) CertificateRequestSpecPtrOutput {
	return o
}

func (o CertificateRequestSpecPtrOutput) Elem() CertificateRequestSpecOutput {
	return o.ApplyT(func (v *CertificateRequestSpec) CertificateRequestSpec { return *v }).(CertificateRequestSpecOutput)
}

// The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.
func (o CertificateRequestSpecPtrOutput) Csr() pulumi.StringPtrOutput {
	return o.ApplyT(func (v *CertificateRequestSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Csr
	}).(pulumi.StringPtrOutput)
}

// The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.
func (o CertificateRequestSpecPtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func (v *CertificateRequestSpec) *string {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.StringPtrOutput)
}

// IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the `cert sign` usage to the list of `usages`.
func (o CertificateRequestSpecPtrOutput) IsCA() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v *CertificateRequestSpec) *bool {
		if v == nil {
			return nil
		}
		return v.IsCA
	}).(pulumi.BoolPtrOutput)
}

// IssuerRef is a reference to the issuer for this CertificateRequest.  If the 'kind' field is not set, or set to 'Issuer', an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the 'kind' field is set to 'ClusterIssuer', a ClusterIssuer with the provided name will be used. The 'name' field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to 'cert-manager.io' if empty.
func (o CertificateRequestSpecPtrOutput) IssuerRef() CertificateRequestSpecIssuerRefPtrOutput {
	return o.ApplyT(func (v *CertificateRequestSpec) *CertificateRequestSpecIssuerRef {
		if v == nil {
			return nil
		}
		return &v.IssuerRef
	}).(CertificateRequestSpecIssuerRefPtrOutput)
}

// Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.
func (o CertificateRequestSpecPtrOutput) Usages() pulumi.StringArrayOutput {
	return o.ApplyT(func (v *CertificateRequestSpec) []string {
		if v == nil {
			return nil
		}
		return v.Usages
	}).(pulumi.StringArrayOutput)
}

// IssuerRef is a reference to the issuer for this CertificateRequest.  If the 'kind' field is not set, or set to 'Issuer', an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the 'kind' field is set to 'ClusterIssuer', a ClusterIssuer with the provided name will be used. The 'name' field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to 'cert-manager.io' if empty.
type CertificateRequestSpecIssuerRef struct {
	// Group of the resource being referred to.
	Group *string `pulumi:"group"`
	// Kind of the resource being referred to.
	Kind *string `pulumi:"kind"`
	// Name of the resource being referred to.
	Name string `pulumi:"name"`
}

// CertificateRequestSpecIssuerRefInput is an input type that accepts CertificateRequestSpecIssuerRefArgs and CertificateRequestSpecIssuerRefOutput values.
// You can construct a concrete instance of `CertificateRequestSpecIssuerRefInput` via:
//
//          CertificateRequestSpecIssuerRefArgs{...}
type CertificateRequestSpecIssuerRefInput interface {
	pulumi.Input

	ToCertificateRequestSpecIssuerRefOutput() CertificateRequestSpecIssuerRefOutput
	ToCertificateRequestSpecIssuerRefOutputWithContext(context.Context) CertificateRequestSpecIssuerRefOutput
}

// IssuerRef is a reference to the issuer for this CertificateRequest.  If the 'kind' field is not set, or set to 'Issuer', an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the 'kind' field is set to 'ClusterIssuer', a ClusterIssuer with the provided name will be used. The 'name' field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to 'cert-manager.io' if empty.
type CertificateRequestSpecIssuerRefArgs struct {
	// Group of the resource being referred to.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind of the resource being referred to.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the resource being referred to.
	Name pulumi.StringInput `pulumi:"name"`
}

func (CertificateRequestSpecIssuerRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateRequestSpecIssuerRef)(nil)).Elem()
}

func (i CertificateRequestSpecIssuerRefArgs) ToCertificateRequestSpecIssuerRefOutput() CertificateRequestSpecIssuerRefOutput {
	return i.ToCertificateRequestSpecIssuerRefOutputWithContext(context.Background())
}

func (i CertificateRequestSpecIssuerRefArgs) ToCertificateRequestSpecIssuerRefOutputWithContext(ctx context.Context) CertificateRequestSpecIssuerRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateRequestSpecIssuerRefOutput)
}

func (i CertificateRequestSpecIssuerRefArgs) ToCertificateRequestSpecIssuerRefPtrOutput() CertificateRequestSpecIssuerRefPtrOutput {
	return i.ToCertificateRequestSpecIssuerRefPtrOutputWithContext(context.Background())
}

func (i CertificateRequestSpecIssuerRefArgs) ToCertificateRequestSpecIssuerRefPtrOutputWithContext(ctx context.Context) CertificateRequestSpecIssuerRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateRequestSpecIssuerRefOutput).ToCertificateRequestSpecIssuerRefPtrOutputWithContext(ctx)
}

// CertificateRequestSpecIssuerRefPtrInput is an input type that accepts CertificateRequestSpecIssuerRefArgs, CertificateRequestSpecIssuerRefPtr and CertificateRequestSpecIssuerRefPtrOutput values.
// You can construct a concrete instance of `CertificateRequestSpecIssuerRefPtrInput` via:
//
//          CertificateRequestSpecIssuerRefArgs{...}
//
//  or:
//
//          nil
type CertificateRequestSpecIssuerRefPtrInput interface {
	pulumi.Input

	ToCertificateRequestSpecIssuerRefPtrOutput() CertificateRequestSpecIssuerRefPtrOutput
	ToCertificateRequestSpecIssuerRefPtrOutputWithContext(context.Context) CertificateRequestSpecIssuerRefPtrOutput
}

type certificateRequestSpecIssuerRefPtrType CertificateRequestSpecIssuerRefArgs

func CertificateRequestSpecIssuerRefPtr(v *CertificateRequestSpecIssuerRefArgs) CertificateRequestSpecIssuerRefPtrInput {	return (*certificateRequestSpecIssuerRefPtrType)(v)
}

func (*certificateRequestSpecIssuerRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateRequestSpecIssuerRef)(nil)).Elem()
}

func (i *certificateRequestSpecIssuerRefPtrType) ToCertificateRequestSpecIssuerRefPtrOutput() CertificateRequestSpecIssuerRefPtrOutput {
	return i.ToCertificateRequestSpecIssuerRefPtrOutputWithContext(context.Background())
}

func (i *certificateRequestSpecIssuerRefPtrType) ToCertificateRequestSpecIssuerRefPtrOutputWithContext(ctx context.Context) CertificateRequestSpecIssuerRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateRequestSpecIssuerRefPtrOutput)
}

// IssuerRef is a reference to the issuer for this CertificateRequest.  If the 'kind' field is not set, or set to 'Issuer', an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the 'kind' field is set to 'ClusterIssuer', a ClusterIssuer with the provided name will be used. The 'name' field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to 'cert-manager.io' if empty.
type CertificateRequestSpecIssuerRefOutput struct { *pulumi.OutputState }

func (CertificateRequestSpecIssuerRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateRequestSpecIssuerRef)(nil)).Elem()
}

func (o CertificateRequestSpecIssuerRefOutput) ToCertificateRequestSpecIssuerRefOutput() CertificateRequestSpecIssuerRefOutput {
	return o
}

func (o CertificateRequestSpecIssuerRefOutput) ToCertificateRequestSpecIssuerRefOutputWithContext(ctx context.Context) CertificateRequestSpecIssuerRefOutput {
	return o
}

func (o CertificateRequestSpecIssuerRefOutput) ToCertificateRequestSpecIssuerRefPtrOutput() CertificateRequestSpecIssuerRefPtrOutput {
	return o.ToCertificateRequestSpecIssuerRefPtrOutputWithContext(context.Background())
}

func (o CertificateRequestSpecIssuerRefOutput) ToCertificateRequestSpecIssuerRefPtrOutputWithContext(ctx context.Context) CertificateRequestSpecIssuerRefPtrOutput {
	return o.ApplyT(func(v CertificateRequestSpecIssuerRef) *CertificateRequestSpecIssuerRef {
		return &v
	}).(CertificateRequestSpecIssuerRefPtrOutput)
}
// Group of the resource being referred to.
func (o CertificateRequestSpecIssuerRefOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateRequestSpecIssuerRef) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind of the resource being referred to.
func (o CertificateRequestSpecIssuerRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateRequestSpecIssuerRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the resource being referred to.
func (o CertificateRequestSpecIssuerRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v CertificateRequestSpecIssuerRef) string { return v.Name }).(pulumi.StringOutput)
}

type CertificateRequestSpecIssuerRefPtrOutput struct { *pulumi.OutputState }

func (CertificateRequestSpecIssuerRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateRequestSpecIssuerRef)(nil)).Elem()
}

func (o CertificateRequestSpecIssuerRefPtrOutput) ToCertificateRequestSpecIssuerRefPtrOutput() CertificateRequestSpecIssuerRefPtrOutput {
	return o
}

func (o CertificateRequestSpecIssuerRefPtrOutput) ToCertificateRequestSpecIssuerRefPtrOutputWithContext(ctx context.Context) CertificateRequestSpecIssuerRefPtrOutput {
	return o
}

func (o CertificateRequestSpecIssuerRefPtrOutput) Elem() CertificateRequestSpecIssuerRefOutput {
	return o.ApplyT(func (v *CertificateRequestSpecIssuerRef) CertificateRequestSpecIssuerRef { return *v }).(CertificateRequestSpecIssuerRefOutput)
}

// Group of the resource being referred to.
func (o CertificateRequestSpecIssuerRefPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func (v *CertificateRequestSpecIssuerRef) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Kind of the resource being referred to.
func (o CertificateRequestSpecIssuerRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v *CertificateRequestSpecIssuerRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the resource being referred to.
func (o CertificateRequestSpecIssuerRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func (v *CertificateRequestSpecIssuerRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Status of the CertificateRequest. This is set and managed automatically.
type CertificateRequestStatus struct {
	// The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.
	Ca *string `pulumi:"ca"`
	// The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.
	Certificate *string `pulumi:"certificate"`
	// List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.
	Conditions []CertificateRequestStatusConditions `pulumi:"conditions"`
	// FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.
	FailureTime *string `pulumi:"failureTime"`
}

// CertificateRequestStatusInput is an input type that accepts CertificateRequestStatusArgs and CertificateRequestStatusOutput values.
// You can construct a concrete instance of `CertificateRequestStatusInput` via:
//
//          CertificateRequestStatusArgs{...}
type CertificateRequestStatusInput interface {
	pulumi.Input

	ToCertificateRequestStatusOutput() CertificateRequestStatusOutput
	ToCertificateRequestStatusOutputWithContext(context.Context) CertificateRequestStatusOutput
}

// Status of the CertificateRequest. This is set and managed automatically.
type CertificateRequestStatusArgs struct {
	// The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.
	Ca pulumi.StringPtrInput `pulumi:"ca"`
	// The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.
	Certificate pulumi.StringPtrInput `pulumi:"certificate"`
	// List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.
	Conditions CertificateRequestStatusConditionsArrayInput `pulumi:"conditions"`
	// FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.
	FailureTime pulumi.StringPtrInput `pulumi:"failureTime"`
}

func (CertificateRequestStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateRequestStatus)(nil)).Elem()
}

func (i CertificateRequestStatusArgs) ToCertificateRequestStatusOutput() CertificateRequestStatusOutput {
	return i.ToCertificateRequestStatusOutputWithContext(context.Background())
}

func (i CertificateRequestStatusArgs) ToCertificateRequestStatusOutputWithContext(ctx context.Context) CertificateRequestStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateRequestStatusOutput)
}

func (i CertificateRequestStatusArgs) ToCertificateRequestStatusPtrOutput() CertificateRequestStatusPtrOutput {
	return i.ToCertificateRequestStatusPtrOutputWithContext(context.Background())
}

func (i CertificateRequestStatusArgs) ToCertificateRequestStatusPtrOutputWithContext(ctx context.Context) CertificateRequestStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateRequestStatusOutput).ToCertificateRequestStatusPtrOutputWithContext(ctx)
}

// CertificateRequestStatusPtrInput is an input type that accepts CertificateRequestStatusArgs, CertificateRequestStatusPtr and CertificateRequestStatusPtrOutput values.
// You can construct a concrete instance of `CertificateRequestStatusPtrInput` via:
//
//          CertificateRequestStatusArgs{...}
//
//  or:
//
//          nil
type CertificateRequestStatusPtrInput interface {
	pulumi.Input

	ToCertificateRequestStatusPtrOutput() CertificateRequestStatusPtrOutput
	ToCertificateRequestStatusPtrOutputWithContext(context.Context) CertificateRequestStatusPtrOutput
}

type certificateRequestStatusPtrType CertificateRequestStatusArgs

func CertificateRequestStatusPtr(v *CertificateRequestStatusArgs) CertificateRequestStatusPtrInput {	return (*certificateRequestStatusPtrType)(v)
}

func (*certificateRequestStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateRequestStatus)(nil)).Elem()
}

func (i *certificateRequestStatusPtrType) ToCertificateRequestStatusPtrOutput() CertificateRequestStatusPtrOutput {
	return i.ToCertificateRequestStatusPtrOutputWithContext(context.Background())
}

func (i *certificateRequestStatusPtrType) ToCertificateRequestStatusPtrOutputWithContext(ctx context.Context) CertificateRequestStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateRequestStatusPtrOutput)
}

// Status of the CertificateRequest. This is set and managed automatically.
type CertificateRequestStatusOutput struct { *pulumi.OutputState }

func (CertificateRequestStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateRequestStatus)(nil)).Elem()
}

func (o CertificateRequestStatusOutput) ToCertificateRequestStatusOutput() CertificateRequestStatusOutput {
	return o
}

func (o CertificateRequestStatusOutput) ToCertificateRequestStatusOutputWithContext(ctx context.Context) CertificateRequestStatusOutput {
	return o
}

func (o CertificateRequestStatusOutput) ToCertificateRequestStatusPtrOutput() CertificateRequestStatusPtrOutput {
	return o.ToCertificateRequestStatusPtrOutputWithContext(context.Background())
}

func (o CertificateRequestStatusOutput) ToCertificateRequestStatusPtrOutputWithContext(ctx context.Context) CertificateRequestStatusPtrOutput {
	return o.ApplyT(func(v CertificateRequestStatus) *CertificateRequestStatus {
		return &v
	}).(CertificateRequestStatusPtrOutput)
}
// The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.
func (o CertificateRequestStatusOutput) Ca() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateRequestStatus) *string { return v.Ca }).(pulumi.StringPtrOutput)
}

// The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.
func (o CertificateRequestStatusOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateRequestStatus) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.
func (o CertificateRequestStatusOutput) Conditions() CertificateRequestStatusConditionsArrayOutput {
	return o.ApplyT(func (v CertificateRequestStatus) []CertificateRequestStatusConditions { return v.Conditions }).(CertificateRequestStatusConditionsArrayOutput)
}

// FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.
func (o CertificateRequestStatusOutput) FailureTime() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateRequestStatus) *string { return v.FailureTime }).(pulumi.StringPtrOutput)
}

type CertificateRequestStatusPtrOutput struct { *pulumi.OutputState }

func (CertificateRequestStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateRequestStatus)(nil)).Elem()
}

func (o CertificateRequestStatusPtrOutput) ToCertificateRequestStatusPtrOutput() CertificateRequestStatusPtrOutput {
	return o
}

func (o CertificateRequestStatusPtrOutput) ToCertificateRequestStatusPtrOutputWithContext(ctx context.Context) CertificateRequestStatusPtrOutput {
	return o
}

func (o CertificateRequestStatusPtrOutput) Elem() CertificateRequestStatusOutput {
	return o.ApplyT(func (v *CertificateRequestStatus) CertificateRequestStatus { return *v }).(CertificateRequestStatusOutput)
}

// The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.
func (o CertificateRequestStatusPtrOutput) Ca() pulumi.StringPtrOutput {
	return o.ApplyT(func (v *CertificateRequestStatus) *string {
		if v == nil {
			return nil
		}
		return v.Ca
	}).(pulumi.StringPtrOutput)
}

// The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.
func (o CertificateRequestStatusPtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func (v *CertificateRequestStatus) *string {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(pulumi.StringPtrOutput)
}

// List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.
func (o CertificateRequestStatusPtrOutput) Conditions() CertificateRequestStatusConditionsArrayOutput {
	return o.ApplyT(func (v *CertificateRequestStatus) []CertificateRequestStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(CertificateRequestStatusConditionsArrayOutput)
}

// FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.
func (o CertificateRequestStatusPtrOutput) FailureTime() pulumi.StringPtrOutput {
	return o.ApplyT(func (v *CertificateRequestStatus) *string {
		if v == nil {
			return nil
		}
		return v.FailureTime
	}).(pulumi.StringPtrOutput)
}

// CertificateRequestCondition contains condition information for a CertificateRequest.
type CertificateRequestStatusConditions struct {
	// LastTransitionTime is the timestamp corresponding to the last status change of this condition.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Message is a human readable description of the details of the last transition, complementing reason.
	Message *string `pulumi:"message"`
	// Reason is a brief machine readable explanation for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of ('True', 'False', 'Unknown').
	Status string `pulumi:"status"`
	// Type of the condition, known values are ('Ready', 'InvalidRequest').
	Type string `pulumi:"type"`
}

// CertificateRequestStatusConditionsInput is an input type that accepts CertificateRequestStatusConditionsArgs and CertificateRequestStatusConditionsOutput values.
// You can construct a concrete instance of `CertificateRequestStatusConditionsInput` via:
//
//          CertificateRequestStatusConditionsArgs{...}
type CertificateRequestStatusConditionsInput interface {
	pulumi.Input

	ToCertificateRequestStatusConditionsOutput() CertificateRequestStatusConditionsOutput
	ToCertificateRequestStatusConditionsOutputWithContext(context.Context) CertificateRequestStatusConditionsOutput
}

// CertificateRequestCondition contains condition information for a CertificateRequest.
type CertificateRequestStatusConditionsArgs struct {
	// LastTransitionTime is the timestamp corresponding to the last status change of this condition.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Message is a human readable description of the details of the last transition, complementing reason.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Reason is a brief machine readable explanation for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of ('True', 'False', 'Unknown').
	Status pulumi.StringInput `pulumi:"status"`
	// Type of the condition, known values are ('Ready', 'InvalidRequest').
	Type pulumi.StringInput `pulumi:"type"`
}

func (CertificateRequestStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateRequestStatusConditions)(nil)).Elem()
}

func (i CertificateRequestStatusConditionsArgs) ToCertificateRequestStatusConditionsOutput() CertificateRequestStatusConditionsOutput {
	return i.ToCertificateRequestStatusConditionsOutputWithContext(context.Background())
}

func (i CertificateRequestStatusConditionsArgs) ToCertificateRequestStatusConditionsOutputWithContext(ctx context.Context) CertificateRequestStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateRequestStatusConditionsOutput)
}

// CertificateRequestStatusConditionsArrayInput is an input type that accepts CertificateRequestStatusConditionsArray and CertificateRequestStatusConditionsArrayOutput values.
// You can construct a concrete instance of `CertificateRequestStatusConditionsArrayInput` via:
//
//          CertificateRequestStatusConditionsArray{ CertificateRequestStatusConditionsArgs{...} }
type CertificateRequestStatusConditionsArrayInput interface {
	pulumi.Input

	ToCertificateRequestStatusConditionsArrayOutput() CertificateRequestStatusConditionsArrayOutput
	ToCertificateRequestStatusConditionsArrayOutputWithContext(context.Context) CertificateRequestStatusConditionsArrayOutput
}

type CertificateRequestStatusConditionsArray []CertificateRequestStatusConditionsInput

func (CertificateRequestStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateRequestStatusConditions)(nil)).Elem()
}

func (i CertificateRequestStatusConditionsArray) ToCertificateRequestStatusConditionsArrayOutput() CertificateRequestStatusConditionsArrayOutput {
	return i.ToCertificateRequestStatusConditionsArrayOutputWithContext(context.Background())
}

func (i CertificateRequestStatusConditionsArray) ToCertificateRequestStatusConditionsArrayOutputWithContext(ctx context.Context) CertificateRequestStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateRequestStatusConditionsArrayOutput)
}

// CertificateRequestCondition contains condition information for a CertificateRequest.
type CertificateRequestStatusConditionsOutput struct { *pulumi.OutputState }

func (CertificateRequestStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateRequestStatusConditions)(nil)).Elem()
}

func (o CertificateRequestStatusConditionsOutput) ToCertificateRequestStatusConditionsOutput() CertificateRequestStatusConditionsOutput {
	return o
}

func (o CertificateRequestStatusConditionsOutput) ToCertificateRequestStatusConditionsOutputWithContext(ctx context.Context) CertificateRequestStatusConditionsOutput {
	return o
}

// LastTransitionTime is the timestamp corresponding to the last status change of this condition.
func (o CertificateRequestStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateRequestStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Message is a human readable description of the details of the last transition, complementing reason.
func (o CertificateRequestStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateRequestStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Reason is a brief machine readable explanation for the condition's last transition.
func (o CertificateRequestStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateRequestStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of ('True', 'False', 'Unknown').
func (o CertificateRequestStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func (v CertificateRequestStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of the condition, known values are ('Ready', 'InvalidRequest').
func (o CertificateRequestStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func (v CertificateRequestStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type CertificateRequestStatusConditionsArrayOutput struct { *pulumi.OutputState }

func (CertificateRequestStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateRequestStatusConditions)(nil)).Elem()
}

func (o CertificateRequestStatusConditionsArrayOutput) ToCertificateRequestStatusConditionsArrayOutput() CertificateRequestStatusConditionsArrayOutput {
	return o
}

func (o CertificateRequestStatusConditionsArrayOutput) ToCertificateRequestStatusConditionsArrayOutputWithContext(ctx context.Context) CertificateRequestStatusConditionsArrayOutput {
	return o
}

func (o CertificateRequestStatusConditionsArrayOutput) Index(i pulumi.IntInput) CertificateRequestStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) CertificateRequestStatusConditions {
		return vs[0].([]CertificateRequestStatusConditions)[vs[1].(int)]
	}).(CertificateRequestStatusConditionsOutput)
}

func init() {
	pulumi.RegisterOutputType(CertificateRequestTypeOutput{})
	pulumi.RegisterOutputType(CertificateRequestSpecOutput{})
	pulumi.RegisterOutputType(CertificateRequestSpecPtrOutput{})
	pulumi.RegisterOutputType(CertificateRequestSpecIssuerRefOutput{})
	pulumi.RegisterOutputType(CertificateRequestSpecIssuerRefPtrOutput{})
	pulumi.RegisterOutputType(CertificateRequestStatusOutput{})
	pulumi.RegisterOutputType(CertificateRequestStatusPtrOutput{})
	pulumi.RegisterOutputType(CertificateRequestStatusConditionsOutput{})
	pulumi.RegisterOutputType(CertificateRequestStatusConditionsArrayOutput{})
}
