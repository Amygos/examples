// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha3

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A Certificate resource should be created to ensure an up to date and signed x509 certificate is stored in the Kubernetes Secret resource named in `spec.secretName`.
//  The stored certificate will be renewed before it expires (as configured by `spec.renewBefore`).
type Certificate struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	Metadata metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// Desired state of the Certificate resource.
	Spec CertificateSpecPtrOutput `pulumi:"spec"`
	// Status of the Certificate. This is set and managed automatically.
	Status CertificateStatusPtrOutput `pulumi:"status"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil {
		args = &CertificateArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("cert-manager.io/v1alpha3")
	args.Kind = pulumi.StringPtr("Certificate")
	var resource Certificate
	err := ctx.RegisterResource("kubernetes:cert-manager.io/v1alpha3:Certificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	var resource Certificate
	err := ctx.ReadResource("kubernetes:cert-manager.io/v1alpha3:Certificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type certificateState struct {
	ApiVersion *string `pulumi:"apiVersion"`
	Kind *string `pulumi:"kind"`
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Desired state of the Certificate resource.
	Spec *CertificateSpec `pulumi:"spec"`
	// Status of the Certificate. This is set and managed automatically.
	Status *CertificateStatus `pulumi:"status"`
}

type CertificateState struct {
	ApiVersion pulumi.StringPtrInput
	Kind pulumi.StringPtrInput
	Metadata metav1.ObjectMetaPtrInput
	// Desired state of the Certificate resource.
	Spec CertificateSpecPtrInput
	// Status of the Certificate. This is set and managed automatically.
	Status CertificateStatusPtrInput
}

func (CertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateState)(nil)).Elem()
}

type certificateArgs struct {
	ApiVersion *string `pulumi:"apiVersion"`
	Kind *string `pulumi:"kind"`
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Desired state of the Certificate resource.
	Spec *CertificateSpec `pulumi:"spec"`
	// Status of the Certificate. This is set and managed automatically.
	Status *CertificateStatus `pulumi:"status"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind pulumi.StringPtrInput
	Metadata metav1.ObjectMetaPtrInput
	// Desired state of the Certificate resource.
	Spec CertificateSpecPtrInput
	// Status of the Certificate. This is set and managed automatically.
	Status CertificateStatusPtrInput
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateArgs)(nil)).Elem()
}

// A Certificate resource should be created to ensure an up to date and signed x509 certificate is stored in the Kubernetes Secret resource named in `spec.secretName`.
//  The stored certificate will be renewed before it expires (as configured by `spec.renewBefore`).
type CertificateType struct {
	ApiVersion *string `pulumi:"apiVersion"`
	Kind *string `pulumi:"kind"`
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Desired state of the Certificate resource.
	Spec *CertificateSpec `pulumi:"spec"`
	// Status of the Certificate. This is set and managed automatically.
	Status *CertificateStatus `pulumi:"status"`
}

// CertificateTypeInput is an input type that accepts CertificateTypeArgs and CertificateTypeOutput values.
// You can construct a concrete instance of `CertificateTypeInput` via:
//
//          CertificateTypeArgs{...}
type CertificateTypeInput interface {
	pulumi.Input

	ToCertificateTypeOutput() CertificateTypeOutput
	ToCertificateTypeOutputWithContext(context.Context) CertificateTypeOutput
}

// A Certificate resource should be created to ensure an up to date and signed x509 certificate is stored in the Kubernetes Secret resource named in `spec.secretName`.
//  The stored certificate will be renewed before it expires (as configured by `spec.renewBefore`).
type CertificateTypeArgs struct {
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Desired state of the Certificate resource.
	Spec CertificateSpecPtrInput `pulumi:"spec"`
	// Status of the Certificate. This is set and managed automatically.
	Status CertificateStatusPtrInput `pulumi:"status"`
}

func (CertificateTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateType)(nil)).Elem()
}

func (i CertificateTypeArgs) ToCertificateTypeOutput() CertificateTypeOutput {
	return i.ToCertificateTypeOutputWithContext(context.Background())
}

func (i CertificateTypeArgs) ToCertificateTypeOutputWithContext(ctx context.Context) CertificateTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateTypeOutput)
}

// A Certificate resource should be created to ensure an up to date and signed x509 certificate is stored in the Kubernetes Secret resource named in `spec.secretName`.
//  The stored certificate will be renewed before it expires (as configured by `spec.renewBefore`).
type CertificateTypeOutput struct { *pulumi.OutputState }

func (CertificateTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateType)(nil)).Elem()
}

func (o CertificateTypeOutput) ToCertificateTypeOutput() CertificateTypeOutput {
	return o
}

func (o CertificateTypeOutput) ToCertificateTypeOutputWithContext(ctx context.Context) CertificateTypeOutput {
	return o
}

func (o CertificateTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o CertificateTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o CertificateTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func (v CertificateType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Desired state of the Certificate resource.
func (o CertificateTypeOutput) Spec() CertificateSpecPtrOutput {
	return o.ApplyT(func (v CertificateType) *CertificateSpec { return v.Spec }).(CertificateSpecPtrOutput)
}

// Status of the Certificate. This is set and managed automatically.
func (o CertificateTypeOutput) Status() CertificateStatusPtrOutput {
	return o.ApplyT(func (v CertificateType) *CertificateStatus { return v.Status }).(CertificateStatusPtrOutput)
}

// Desired state of the Certificate resource.
type CertificateSpec struct {
	// CommonName is a common name to be used on the Certificate. The CommonName should have a length of 64 characters or fewer to avoid generating invalid CSRs. This value is ignored by TLS clients when any subject alt name is set. This is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4
	CommonName *string `pulumi:"commonName"`
	// DNSNames is a list of DNS subjectAltNames to be set on the Certificate.
	DnsNames []string `pulumi:"dnsNames"`
	// The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types. If overridden and `renewBefore` is greater than the actual certificate duration, the certificate will be automatically renewed 2/3rds of the way through the certificate's duration.
	Duration *string `pulumi:"duration"`
	// EmailSANs is a list of email subjectAltNames to be set on the Certificate.
	EmailSANs []string `pulumi:"emailSANs"`
	// IPAddresses is a list of IP address subjectAltNames to be set on the Certificate.
	IpAddresses []string `pulumi:"ipAddresses"`
	// IsCA will mark this Certificate as valid for certificate signing. This will automatically add the `cert sign` usage to the list of `usages`.
	IsCA *bool `pulumi:"isCA"`
	// IssuerRef is a reference to the issuer for this certificate. If the 'kind' field is not set, or set to 'Issuer', an Issuer resource with the given name in the same namespace as the Certificate will be used. If the 'kind' field is set to 'ClusterIssuer', a ClusterIssuer with the provided name will be used. The 'name' field in this stanza is required at all times.
	IssuerRef CertificateSpecIssuerRef `pulumi:"issuerRef"`
	// KeyAlgorithm is the private key algorithm of the corresponding private key for this certificate. If provided, allowed values are either "rsa" or "ecdsa" If `keyAlgorithm` is specified and `keySize` is not provided, key size of 256 will be used for "ecdsa" key algorithm and key size of 2048 will be used for "rsa" key algorithm.
	KeyAlgorithm *string `pulumi:"keyAlgorithm"`
	// KeyEncoding is the private key cryptography standards (PKCS) for this certificate's private key to be encoded in. If provided, allowed values are "pkcs1" and "pkcs8" standing for PKCS#1 and PKCS#8, respectively. If KeyEncoding is not specified, then PKCS#1 will be used by default.
	KeyEncoding *string `pulumi:"keyEncoding"`
	// KeySize is the key bit size of the corresponding private key for this certificate. If `keyAlgorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`, and will default to `2048` if not specified. If `keyAlgorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`, and will default to `256` if not specified. No other values are allowed.
	KeySize *int `pulumi:"keySize"`
	// Keystores configures additional keystore output formats stored in the `secretName` Secret resource.
	Keystores *CertificateSpecKeystores `pulumi:"keystores"`
	// Options to control private keys used for the Certificate.
	PrivateKey *CertificateSpecPrivateKey `pulumi:"privateKey"`
	// The amount of time before the currently issued certificate's `notAfter` time that cert-manager will begin to attempt to renew the certificate. If this value is greater than the total duration of the certificate (i.e. notAfter - notBefore), it will be automatically renewed 2/3rds of the way through the certificate's duration.
	RenewBefore *string `pulumi:"renewBefore"`
	// SecretName is the name of the secret resource that will be automatically created and managed by this Certificate resource. It will be populated with a private key and certificate, signed by the denoted issuer.
	SecretName string `pulumi:"secretName"`
	// Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
	Subject *CertificateSpecSubject `pulumi:"subject"`
	// URISANs is a list of URI subjectAltNames to be set on the Certificate.
	UriSANs []string `pulumi:"uriSANs"`
	// Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.
	Usages []string `pulumi:"usages"`
}

// CertificateSpecInput is an input type that accepts CertificateSpecArgs and CertificateSpecOutput values.
// You can construct a concrete instance of `CertificateSpecInput` via:
//
//          CertificateSpecArgs{...}
type CertificateSpecInput interface {
	pulumi.Input

	ToCertificateSpecOutput() CertificateSpecOutput
	ToCertificateSpecOutputWithContext(context.Context) CertificateSpecOutput
}

// Desired state of the Certificate resource.
type CertificateSpecArgs struct {
	// CommonName is a common name to be used on the Certificate. The CommonName should have a length of 64 characters or fewer to avoid generating invalid CSRs. This value is ignored by TLS clients when any subject alt name is set. This is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4
	CommonName pulumi.StringPtrInput `pulumi:"commonName"`
	// DNSNames is a list of DNS subjectAltNames to be set on the Certificate.
	DnsNames pulumi.StringArrayInput `pulumi:"dnsNames"`
	// The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types. If overridden and `renewBefore` is greater than the actual certificate duration, the certificate will be automatically renewed 2/3rds of the way through the certificate's duration.
	Duration pulumi.StringPtrInput `pulumi:"duration"`
	// EmailSANs is a list of email subjectAltNames to be set on the Certificate.
	EmailSANs pulumi.StringArrayInput `pulumi:"emailSANs"`
	// IPAddresses is a list of IP address subjectAltNames to be set on the Certificate.
	IpAddresses pulumi.StringArrayInput `pulumi:"ipAddresses"`
	// IsCA will mark this Certificate as valid for certificate signing. This will automatically add the `cert sign` usage to the list of `usages`.
	IsCA pulumi.BoolPtrInput `pulumi:"isCA"`
	// IssuerRef is a reference to the issuer for this certificate. If the 'kind' field is not set, or set to 'Issuer', an Issuer resource with the given name in the same namespace as the Certificate will be used. If the 'kind' field is set to 'ClusterIssuer', a ClusterIssuer with the provided name will be used. The 'name' field in this stanza is required at all times.
	IssuerRef CertificateSpecIssuerRefInput `pulumi:"issuerRef"`
	// KeyAlgorithm is the private key algorithm of the corresponding private key for this certificate. If provided, allowed values are either "rsa" or "ecdsa" If `keyAlgorithm` is specified and `keySize` is not provided, key size of 256 will be used for "ecdsa" key algorithm and key size of 2048 will be used for "rsa" key algorithm.
	KeyAlgorithm pulumi.StringPtrInput `pulumi:"keyAlgorithm"`
	// KeyEncoding is the private key cryptography standards (PKCS) for this certificate's private key to be encoded in. If provided, allowed values are "pkcs1" and "pkcs8" standing for PKCS#1 and PKCS#8, respectively. If KeyEncoding is not specified, then PKCS#1 will be used by default.
	KeyEncoding pulumi.StringPtrInput `pulumi:"keyEncoding"`
	// KeySize is the key bit size of the corresponding private key for this certificate. If `keyAlgorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`, and will default to `2048` if not specified. If `keyAlgorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`, and will default to `256` if not specified. No other values are allowed.
	KeySize pulumi.IntPtrInput `pulumi:"keySize"`
	// Keystores configures additional keystore output formats stored in the `secretName` Secret resource.
	Keystores CertificateSpecKeystoresPtrInput `pulumi:"keystores"`
	// Options to control private keys used for the Certificate.
	PrivateKey CertificateSpecPrivateKeyPtrInput `pulumi:"privateKey"`
	// The amount of time before the currently issued certificate's `notAfter` time that cert-manager will begin to attempt to renew the certificate. If this value is greater than the total duration of the certificate (i.e. notAfter - notBefore), it will be automatically renewed 2/3rds of the way through the certificate's duration.
	RenewBefore pulumi.StringPtrInput `pulumi:"renewBefore"`
	// SecretName is the name of the secret resource that will be automatically created and managed by this Certificate resource. It will be populated with a private key and certificate, signed by the denoted issuer.
	SecretName pulumi.StringInput `pulumi:"secretName"`
	// Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
	Subject CertificateSpecSubjectPtrInput `pulumi:"subject"`
	// URISANs is a list of URI subjectAltNames to be set on the Certificate.
	UriSANs pulumi.StringArrayInput `pulumi:"uriSANs"`
	// Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.
	Usages pulumi.StringArrayInput `pulumi:"usages"`
}

func (CertificateSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSpec)(nil)).Elem()
}

func (i CertificateSpecArgs) ToCertificateSpecOutput() CertificateSpecOutput {
	return i.ToCertificateSpecOutputWithContext(context.Background())
}

func (i CertificateSpecArgs) ToCertificateSpecOutputWithContext(ctx context.Context) CertificateSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSpecOutput)
}

func (i CertificateSpecArgs) ToCertificateSpecPtrOutput() CertificateSpecPtrOutput {
	return i.ToCertificateSpecPtrOutputWithContext(context.Background())
}

func (i CertificateSpecArgs) ToCertificateSpecPtrOutputWithContext(ctx context.Context) CertificateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSpecOutput).ToCertificateSpecPtrOutputWithContext(ctx)
}

// CertificateSpecPtrInput is an input type that accepts CertificateSpecArgs, CertificateSpecPtr and CertificateSpecPtrOutput values.
// You can construct a concrete instance of `CertificateSpecPtrInput` via:
//
//          CertificateSpecArgs{...}
//
//  or:
//
//          nil
type CertificateSpecPtrInput interface {
	pulumi.Input

	ToCertificateSpecPtrOutput() CertificateSpecPtrOutput
	ToCertificateSpecPtrOutputWithContext(context.Context) CertificateSpecPtrOutput
}

type certificateSpecPtrType CertificateSpecArgs

func CertificateSpecPtr(v *CertificateSpecArgs) CertificateSpecPtrInput {	return (*certificateSpecPtrType)(v)
}

func (*certificateSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSpec)(nil)).Elem()
}

func (i *certificateSpecPtrType) ToCertificateSpecPtrOutput() CertificateSpecPtrOutput {
	return i.ToCertificateSpecPtrOutputWithContext(context.Background())
}

func (i *certificateSpecPtrType) ToCertificateSpecPtrOutputWithContext(ctx context.Context) CertificateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSpecPtrOutput)
}

// Desired state of the Certificate resource.
type CertificateSpecOutput struct { *pulumi.OutputState }

func (CertificateSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSpec)(nil)).Elem()
}

func (o CertificateSpecOutput) ToCertificateSpecOutput() CertificateSpecOutput {
	return o
}

func (o CertificateSpecOutput) ToCertificateSpecOutputWithContext(ctx context.Context) CertificateSpecOutput {
	return o
}

func (o CertificateSpecOutput) ToCertificateSpecPtrOutput() CertificateSpecPtrOutput {
	return o.ToCertificateSpecPtrOutputWithContext(context.Background())
}

func (o CertificateSpecOutput) ToCertificateSpecPtrOutputWithContext(ctx context.Context) CertificateSpecPtrOutput {
	return o.ApplyT(func(v CertificateSpec) *CertificateSpec {
		return &v
	}).(CertificateSpecPtrOutput)
}
// CommonName is a common name to be used on the Certificate. The CommonName should have a length of 64 characters or fewer to avoid generating invalid CSRs. This value is ignored by TLS clients when any subject alt name is set. This is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4
func (o CertificateSpecOutput) CommonName() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateSpec) *string { return v.CommonName }).(pulumi.StringPtrOutput)
}

// DNSNames is a list of DNS subjectAltNames to be set on the Certificate.
func (o CertificateSpecOutput) DnsNames() pulumi.StringArrayOutput {
	return o.ApplyT(func (v CertificateSpec) []string { return v.DnsNames }).(pulumi.StringArrayOutput)
}

// The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types. If overridden and `renewBefore` is greater than the actual certificate duration, the certificate will be automatically renewed 2/3rds of the way through the certificate's duration.
func (o CertificateSpecOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateSpec) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

// EmailSANs is a list of email subjectAltNames to be set on the Certificate.
func (o CertificateSpecOutput) EmailSANs() pulumi.StringArrayOutput {
	return o.ApplyT(func (v CertificateSpec) []string { return v.EmailSANs }).(pulumi.StringArrayOutput)
}

// IPAddresses is a list of IP address subjectAltNames to be set on the Certificate.
func (o CertificateSpecOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func (v CertificateSpec) []string { return v.IpAddresses }).(pulumi.StringArrayOutput)
}

// IsCA will mark this Certificate as valid for certificate signing. This will automatically add the `cert sign` usage to the list of `usages`.
func (o CertificateSpecOutput) IsCA() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v CertificateSpec) *bool { return v.IsCA }).(pulumi.BoolPtrOutput)
}

// IssuerRef is a reference to the issuer for this certificate. If the 'kind' field is not set, or set to 'Issuer', an Issuer resource with the given name in the same namespace as the Certificate will be used. If the 'kind' field is set to 'ClusterIssuer', a ClusterIssuer with the provided name will be used. The 'name' field in this stanza is required at all times.
func (o CertificateSpecOutput) IssuerRef() CertificateSpecIssuerRefOutput {
	return o.ApplyT(func (v CertificateSpec) CertificateSpecIssuerRef { return v.IssuerRef }).(CertificateSpecIssuerRefOutput)
}

// KeyAlgorithm is the private key algorithm of the corresponding private key for this certificate. If provided, allowed values are either "rsa" or "ecdsa" If `keyAlgorithm` is specified and `keySize` is not provided, key size of 256 will be used for "ecdsa" key algorithm and key size of 2048 will be used for "rsa" key algorithm.
func (o CertificateSpecOutput) KeyAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateSpec) *string { return v.KeyAlgorithm }).(pulumi.StringPtrOutput)
}

// KeyEncoding is the private key cryptography standards (PKCS) for this certificate's private key to be encoded in. If provided, allowed values are "pkcs1" and "pkcs8" standing for PKCS#1 and PKCS#8, respectively. If KeyEncoding is not specified, then PKCS#1 will be used by default.
func (o CertificateSpecOutput) KeyEncoding() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateSpec) *string { return v.KeyEncoding }).(pulumi.StringPtrOutput)
}

// KeySize is the key bit size of the corresponding private key for this certificate. If `keyAlgorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`, and will default to `2048` if not specified. If `keyAlgorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`, and will default to `256` if not specified. No other values are allowed.
func (o CertificateSpecOutput) KeySize() pulumi.IntPtrOutput {
	return o.ApplyT(func (v CertificateSpec) *int { return v.KeySize }).(pulumi.IntPtrOutput)
}

// Keystores configures additional keystore output formats stored in the `secretName` Secret resource.
func (o CertificateSpecOutput) Keystores() CertificateSpecKeystoresPtrOutput {
	return o.ApplyT(func (v CertificateSpec) *CertificateSpecKeystores { return v.Keystores }).(CertificateSpecKeystoresPtrOutput)
}

// Options to control private keys used for the Certificate.
func (o CertificateSpecOutput) PrivateKey() CertificateSpecPrivateKeyPtrOutput {
	return o.ApplyT(func (v CertificateSpec) *CertificateSpecPrivateKey { return v.PrivateKey }).(CertificateSpecPrivateKeyPtrOutput)
}

// The amount of time before the currently issued certificate's `notAfter` time that cert-manager will begin to attempt to renew the certificate. If this value is greater than the total duration of the certificate (i.e. notAfter - notBefore), it will be automatically renewed 2/3rds of the way through the certificate's duration.
func (o CertificateSpecOutput) RenewBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateSpec) *string { return v.RenewBefore }).(pulumi.StringPtrOutput)
}

// SecretName is the name of the secret resource that will be automatically created and managed by this Certificate resource. It will be populated with a private key and certificate, signed by the denoted issuer.
func (o CertificateSpecOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func (v CertificateSpec) string { return v.SecretName }).(pulumi.StringOutput)
}

// Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
func (o CertificateSpecOutput) Subject() CertificateSpecSubjectPtrOutput {
	return o.ApplyT(func (v CertificateSpec) *CertificateSpecSubject { return v.Subject }).(CertificateSpecSubjectPtrOutput)
}

// URISANs is a list of URI subjectAltNames to be set on the Certificate.
func (o CertificateSpecOutput) UriSANs() pulumi.StringArrayOutput {
	return o.ApplyT(func (v CertificateSpec) []string { return v.UriSANs }).(pulumi.StringArrayOutput)
}

// Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.
func (o CertificateSpecOutput) Usages() pulumi.StringArrayOutput {
	return o.ApplyT(func (v CertificateSpec) []string { return v.Usages }).(pulumi.StringArrayOutput)
}

type CertificateSpecPtrOutput struct { *pulumi.OutputState }

func (CertificateSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSpec)(nil)).Elem()
}

func (o CertificateSpecPtrOutput) ToCertificateSpecPtrOutput() CertificateSpecPtrOutput {
	return o
}

func (o CertificateSpecPtrOutput) ToCertificateSpecPtrOutputWithContext(ctx context.Context) CertificateSpecPtrOutput {
	return o
}

func (o CertificateSpecPtrOutput) Elem() CertificateSpecOutput {
	return o.ApplyT(func (v *CertificateSpec) CertificateSpec { return *v }).(CertificateSpecOutput)
}

// CommonName is a common name to be used on the Certificate. The CommonName should have a length of 64 characters or fewer to avoid generating invalid CSRs. This value is ignored by TLS clients when any subject alt name is set. This is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4
func (o CertificateSpecPtrOutput) CommonName() pulumi.StringPtrOutput {
	return o.ApplyT(func (v *CertificateSpec) *string {
		if v == nil {
			return nil
		}
		return v.CommonName
	}).(pulumi.StringPtrOutput)
}

// DNSNames is a list of DNS subjectAltNames to be set on the Certificate.
func (o CertificateSpecPtrOutput) DnsNames() pulumi.StringArrayOutput {
	return o.ApplyT(func (v *CertificateSpec) []string {
		if v == nil {
			return nil
		}
		return v.DnsNames
	}).(pulumi.StringArrayOutput)
}

// The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types. If overridden and `renewBefore` is greater than the actual certificate duration, the certificate will be automatically renewed 2/3rds of the way through the certificate's duration.
func (o CertificateSpecPtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func (v *CertificateSpec) *string {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.StringPtrOutput)
}

// EmailSANs is a list of email subjectAltNames to be set on the Certificate.
func (o CertificateSpecPtrOutput) EmailSANs() pulumi.StringArrayOutput {
	return o.ApplyT(func (v *CertificateSpec) []string {
		if v == nil {
			return nil
		}
		return v.EmailSANs
	}).(pulumi.StringArrayOutput)
}

// IPAddresses is a list of IP address subjectAltNames to be set on the Certificate.
func (o CertificateSpecPtrOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func (v *CertificateSpec) []string {
		if v == nil {
			return nil
		}
		return v.IpAddresses
	}).(pulumi.StringArrayOutput)
}

// IsCA will mark this Certificate as valid for certificate signing. This will automatically add the `cert sign` usage to the list of `usages`.
func (o CertificateSpecPtrOutput) IsCA() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v *CertificateSpec) *bool {
		if v == nil {
			return nil
		}
		return v.IsCA
	}).(pulumi.BoolPtrOutput)
}

// IssuerRef is a reference to the issuer for this certificate. If the 'kind' field is not set, or set to 'Issuer', an Issuer resource with the given name in the same namespace as the Certificate will be used. If the 'kind' field is set to 'ClusterIssuer', a ClusterIssuer with the provided name will be used. The 'name' field in this stanza is required at all times.
func (o CertificateSpecPtrOutput) IssuerRef() CertificateSpecIssuerRefPtrOutput {
	return o.ApplyT(func (v *CertificateSpec) *CertificateSpecIssuerRef {
		if v == nil {
			return nil
		}
		return &v.IssuerRef
	}).(CertificateSpecIssuerRefPtrOutput)
}

// KeyAlgorithm is the private key algorithm of the corresponding private key for this certificate. If provided, allowed values are either "rsa" or "ecdsa" If `keyAlgorithm` is specified and `keySize` is not provided, key size of 256 will be used for "ecdsa" key algorithm and key size of 2048 will be used for "rsa" key algorithm.
func (o CertificateSpecPtrOutput) KeyAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func (v *CertificateSpec) *string {
		if v == nil {
			return nil
		}
		return v.KeyAlgorithm
	}).(pulumi.StringPtrOutput)
}

// KeyEncoding is the private key cryptography standards (PKCS) for this certificate's private key to be encoded in. If provided, allowed values are "pkcs1" and "pkcs8" standing for PKCS#1 and PKCS#8, respectively. If KeyEncoding is not specified, then PKCS#1 will be used by default.
func (o CertificateSpecPtrOutput) KeyEncoding() pulumi.StringPtrOutput {
	return o.ApplyT(func (v *CertificateSpec) *string {
		if v == nil {
			return nil
		}
		return v.KeyEncoding
	}).(pulumi.StringPtrOutput)
}

// KeySize is the key bit size of the corresponding private key for this certificate. If `keyAlgorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`, and will default to `2048` if not specified. If `keyAlgorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`, and will default to `256` if not specified. No other values are allowed.
func (o CertificateSpecPtrOutput) KeySize() pulumi.IntPtrOutput {
	return o.ApplyT(func (v *CertificateSpec) *int {
		if v == nil {
			return nil
		}
		return v.KeySize
	}).(pulumi.IntPtrOutput)
}

// Keystores configures additional keystore output formats stored in the `secretName` Secret resource.
func (o CertificateSpecPtrOutput) Keystores() CertificateSpecKeystoresPtrOutput {
	return o.ApplyT(func (v *CertificateSpec) *CertificateSpecKeystores {
		if v == nil {
			return nil
		}
		return v.Keystores
	}).(CertificateSpecKeystoresPtrOutput)
}

// Options to control private keys used for the Certificate.
func (o CertificateSpecPtrOutput) PrivateKey() CertificateSpecPrivateKeyPtrOutput {
	return o.ApplyT(func (v *CertificateSpec) *CertificateSpecPrivateKey {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(CertificateSpecPrivateKeyPtrOutput)
}

// The amount of time before the currently issued certificate's `notAfter` time that cert-manager will begin to attempt to renew the certificate. If this value is greater than the total duration of the certificate (i.e. notAfter - notBefore), it will be automatically renewed 2/3rds of the way through the certificate's duration.
func (o CertificateSpecPtrOutput) RenewBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func (v *CertificateSpec) *string {
		if v == nil {
			return nil
		}
		return v.RenewBefore
	}).(pulumi.StringPtrOutput)
}

// SecretName is the name of the secret resource that will be automatically created and managed by this Certificate resource. It will be populated with a private key and certificate, signed by the denoted issuer.
func (o CertificateSpecPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func (v *CertificateSpec) *string {
		if v == nil {
			return nil
		}
		return &v.SecretName
	}).(pulumi.StringPtrOutput)
}

// Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
func (o CertificateSpecPtrOutput) Subject() CertificateSpecSubjectPtrOutput {
	return o.ApplyT(func (v *CertificateSpec) *CertificateSpecSubject {
		if v == nil {
			return nil
		}
		return v.Subject
	}).(CertificateSpecSubjectPtrOutput)
}

// URISANs is a list of URI subjectAltNames to be set on the Certificate.
func (o CertificateSpecPtrOutput) UriSANs() pulumi.StringArrayOutput {
	return o.ApplyT(func (v *CertificateSpec) []string {
		if v == nil {
			return nil
		}
		return v.UriSANs
	}).(pulumi.StringArrayOutput)
}

// Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.
func (o CertificateSpecPtrOutput) Usages() pulumi.StringArrayOutput {
	return o.ApplyT(func (v *CertificateSpec) []string {
		if v == nil {
			return nil
		}
		return v.Usages
	}).(pulumi.StringArrayOutput)
}

// IssuerRef is a reference to the issuer for this certificate. If the 'kind' field is not set, or set to 'Issuer', an Issuer resource with the given name in the same namespace as the Certificate will be used. If the 'kind' field is set to 'ClusterIssuer', a ClusterIssuer with the provided name will be used. The 'name' field in this stanza is required at all times.
type CertificateSpecIssuerRef struct {
	// Group of the resource being referred to.
	Group *string `pulumi:"group"`
	// Kind of the resource being referred to.
	Kind *string `pulumi:"kind"`
	// Name of the resource being referred to.
	Name string `pulumi:"name"`
}

// CertificateSpecIssuerRefInput is an input type that accepts CertificateSpecIssuerRefArgs and CertificateSpecIssuerRefOutput values.
// You can construct a concrete instance of `CertificateSpecIssuerRefInput` via:
//
//          CertificateSpecIssuerRefArgs{...}
type CertificateSpecIssuerRefInput interface {
	pulumi.Input

	ToCertificateSpecIssuerRefOutput() CertificateSpecIssuerRefOutput
	ToCertificateSpecIssuerRefOutputWithContext(context.Context) CertificateSpecIssuerRefOutput
}

// IssuerRef is a reference to the issuer for this certificate. If the 'kind' field is not set, or set to 'Issuer', an Issuer resource with the given name in the same namespace as the Certificate will be used. If the 'kind' field is set to 'ClusterIssuer', a ClusterIssuer with the provided name will be used. The 'name' field in this stanza is required at all times.
type CertificateSpecIssuerRefArgs struct {
	// Group of the resource being referred to.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind of the resource being referred to.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the resource being referred to.
	Name pulumi.StringInput `pulumi:"name"`
}

func (CertificateSpecIssuerRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSpecIssuerRef)(nil)).Elem()
}

func (i CertificateSpecIssuerRefArgs) ToCertificateSpecIssuerRefOutput() CertificateSpecIssuerRefOutput {
	return i.ToCertificateSpecIssuerRefOutputWithContext(context.Background())
}

func (i CertificateSpecIssuerRefArgs) ToCertificateSpecIssuerRefOutputWithContext(ctx context.Context) CertificateSpecIssuerRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSpecIssuerRefOutput)
}

func (i CertificateSpecIssuerRefArgs) ToCertificateSpecIssuerRefPtrOutput() CertificateSpecIssuerRefPtrOutput {
	return i.ToCertificateSpecIssuerRefPtrOutputWithContext(context.Background())
}

func (i CertificateSpecIssuerRefArgs) ToCertificateSpecIssuerRefPtrOutputWithContext(ctx context.Context) CertificateSpecIssuerRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSpecIssuerRefOutput).ToCertificateSpecIssuerRefPtrOutputWithContext(ctx)
}

// CertificateSpecIssuerRefPtrInput is an input type that accepts CertificateSpecIssuerRefArgs, CertificateSpecIssuerRefPtr and CertificateSpecIssuerRefPtrOutput values.
// You can construct a concrete instance of `CertificateSpecIssuerRefPtrInput` via:
//
//          CertificateSpecIssuerRefArgs{...}
//
//  or:
//
//          nil
type CertificateSpecIssuerRefPtrInput interface {
	pulumi.Input

	ToCertificateSpecIssuerRefPtrOutput() CertificateSpecIssuerRefPtrOutput
	ToCertificateSpecIssuerRefPtrOutputWithContext(context.Context) CertificateSpecIssuerRefPtrOutput
}

type certificateSpecIssuerRefPtrType CertificateSpecIssuerRefArgs

func CertificateSpecIssuerRefPtr(v *CertificateSpecIssuerRefArgs) CertificateSpecIssuerRefPtrInput {	return (*certificateSpecIssuerRefPtrType)(v)
}

func (*certificateSpecIssuerRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSpecIssuerRef)(nil)).Elem()
}

func (i *certificateSpecIssuerRefPtrType) ToCertificateSpecIssuerRefPtrOutput() CertificateSpecIssuerRefPtrOutput {
	return i.ToCertificateSpecIssuerRefPtrOutputWithContext(context.Background())
}

func (i *certificateSpecIssuerRefPtrType) ToCertificateSpecIssuerRefPtrOutputWithContext(ctx context.Context) CertificateSpecIssuerRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSpecIssuerRefPtrOutput)
}

// IssuerRef is a reference to the issuer for this certificate. If the 'kind' field is not set, or set to 'Issuer', an Issuer resource with the given name in the same namespace as the Certificate will be used. If the 'kind' field is set to 'ClusterIssuer', a ClusterIssuer with the provided name will be used. The 'name' field in this stanza is required at all times.
type CertificateSpecIssuerRefOutput struct { *pulumi.OutputState }

func (CertificateSpecIssuerRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSpecIssuerRef)(nil)).Elem()
}

func (o CertificateSpecIssuerRefOutput) ToCertificateSpecIssuerRefOutput() CertificateSpecIssuerRefOutput {
	return o
}

func (o CertificateSpecIssuerRefOutput) ToCertificateSpecIssuerRefOutputWithContext(ctx context.Context) CertificateSpecIssuerRefOutput {
	return o
}

func (o CertificateSpecIssuerRefOutput) ToCertificateSpecIssuerRefPtrOutput() CertificateSpecIssuerRefPtrOutput {
	return o.ToCertificateSpecIssuerRefPtrOutputWithContext(context.Background())
}

func (o CertificateSpecIssuerRefOutput) ToCertificateSpecIssuerRefPtrOutputWithContext(ctx context.Context) CertificateSpecIssuerRefPtrOutput {
	return o.ApplyT(func(v CertificateSpecIssuerRef) *CertificateSpecIssuerRef {
		return &v
	}).(CertificateSpecIssuerRefPtrOutput)
}
// Group of the resource being referred to.
func (o CertificateSpecIssuerRefOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateSpecIssuerRef) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind of the resource being referred to.
func (o CertificateSpecIssuerRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateSpecIssuerRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the resource being referred to.
func (o CertificateSpecIssuerRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v CertificateSpecIssuerRef) string { return v.Name }).(pulumi.StringOutput)
}

type CertificateSpecIssuerRefPtrOutput struct { *pulumi.OutputState }

func (CertificateSpecIssuerRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSpecIssuerRef)(nil)).Elem()
}

func (o CertificateSpecIssuerRefPtrOutput) ToCertificateSpecIssuerRefPtrOutput() CertificateSpecIssuerRefPtrOutput {
	return o
}

func (o CertificateSpecIssuerRefPtrOutput) ToCertificateSpecIssuerRefPtrOutputWithContext(ctx context.Context) CertificateSpecIssuerRefPtrOutput {
	return o
}

func (o CertificateSpecIssuerRefPtrOutput) Elem() CertificateSpecIssuerRefOutput {
	return o.ApplyT(func (v *CertificateSpecIssuerRef) CertificateSpecIssuerRef { return *v }).(CertificateSpecIssuerRefOutput)
}

// Group of the resource being referred to.
func (o CertificateSpecIssuerRefPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func (v *CertificateSpecIssuerRef) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Kind of the resource being referred to.
func (o CertificateSpecIssuerRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func (v *CertificateSpecIssuerRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the resource being referred to.
func (o CertificateSpecIssuerRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func (v *CertificateSpecIssuerRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Keystores configures additional keystore output formats stored in the `secretName` Secret resource.
type CertificateSpecKeystores struct {
	// JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
	Jks *CertificateSpecKeystoresJks `pulumi:"jks"`
	// PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
	Pkcs12 *CertificateSpecKeystoresPkcs12 `pulumi:"pkcs12"`
}

// CertificateSpecKeystoresInput is an input type that accepts CertificateSpecKeystoresArgs and CertificateSpecKeystoresOutput values.
// You can construct a concrete instance of `CertificateSpecKeystoresInput` via:
//
//          CertificateSpecKeystoresArgs{...}
type CertificateSpecKeystoresInput interface {
	pulumi.Input

	ToCertificateSpecKeystoresOutput() CertificateSpecKeystoresOutput
	ToCertificateSpecKeystoresOutputWithContext(context.Context) CertificateSpecKeystoresOutput
}

// Keystores configures additional keystore output formats stored in the `secretName` Secret resource.
type CertificateSpecKeystoresArgs struct {
	// JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
	Jks CertificateSpecKeystoresJksPtrInput `pulumi:"jks"`
	// PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
	Pkcs12 CertificateSpecKeystoresPkcs12PtrInput `pulumi:"pkcs12"`
}

func (CertificateSpecKeystoresArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSpecKeystores)(nil)).Elem()
}

func (i CertificateSpecKeystoresArgs) ToCertificateSpecKeystoresOutput() CertificateSpecKeystoresOutput {
	return i.ToCertificateSpecKeystoresOutputWithContext(context.Background())
}

func (i CertificateSpecKeystoresArgs) ToCertificateSpecKeystoresOutputWithContext(ctx context.Context) CertificateSpecKeystoresOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSpecKeystoresOutput)
}

func (i CertificateSpecKeystoresArgs) ToCertificateSpecKeystoresPtrOutput() CertificateSpecKeystoresPtrOutput {
	return i.ToCertificateSpecKeystoresPtrOutputWithContext(context.Background())
}

func (i CertificateSpecKeystoresArgs) ToCertificateSpecKeystoresPtrOutputWithContext(ctx context.Context) CertificateSpecKeystoresPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSpecKeystoresOutput).ToCertificateSpecKeystoresPtrOutputWithContext(ctx)
}

// CertificateSpecKeystoresPtrInput is an input type that accepts CertificateSpecKeystoresArgs, CertificateSpecKeystoresPtr and CertificateSpecKeystoresPtrOutput values.
// You can construct a concrete instance of `CertificateSpecKeystoresPtrInput` via:
//
//          CertificateSpecKeystoresArgs{...}
//
//  or:
//
//          nil
type CertificateSpecKeystoresPtrInput interface {
	pulumi.Input

	ToCertificateSpecKeystoresPtrOutput() CertificateSpecKeystoresPtrOutput
	ToCertificateSpecKeystoresPtrOutputWithContext(context.Context) CertificateSpecKeystoresPtrOutput
}

type certificateSpecKeystoresPtrType CertificateSpecKeystoresArgs

func CertificateSpecKeystoresPtr(v *CertificateSpecKeystoresArgs) CertificateSpecKeystoresPtrInput {	return (*certificateSpecKeystoresPtrType)(v)
}

func (*certificateSpecKeystoresPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSpecKeystores)(nil)).Elem()
}

func (i *certificateSpecKeystoresPtrType) ToCertificateSpecKeystoresPtrOutput() CertificateSpecKeystoresPtrOutput {
	return i.ToCertificateSpecKeystoresPtrOutputWithContext(context.Background())
}

func (i *certificateSpecKeystoresPtrType) ToCertificateSpecKeystoresPtrOutputWithContext(ctx context.Context) CertificateSpecKeystoresPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSpecKeystoresPtrOutput)
}

// Keystores configures additional keystore output formats stored in the `secretName` Secret resource.
type CertificateSpecKeystoresOutput struct { *pulumi.OutputState }

func (CertificateSpecKeystoresOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSpecKeystores)(nil)).Elem()
}

func (o CertificateSpecKeystoresOutput) ToCertificateSpecKeystoresOutput() CertificateSpecKeystoresOutput {
	return o
}

func (o CertificateSpecKeystoresOutput) ToCertificateSpecKeystoresOutputWithContext(ctx context.Context) CertificateSpecKeystoresOutput {
	return o
}

func (o CertificateSpecKeystoresOutput) ToCertificateSpecKeystoresPtrOutput() CertificateSpecKeystoresPtrOutput {
	return o.ToCertificateSpecKeystoresPtrOutputWithContext(context.Background())
}

func (o CertificateSpecKeystoresOutput) ToCertificateSpecKeystoresPtrOutputWithContext(ctx context.Context) CertificateSpecKeystoresPtrOutput {
	return o.ApplyT(func(v CertificateSpecKeystores) *CertificateSpecKeystores {
		return &v
	}).(CertificateSpecKeystoresPtrOutput)
}
// JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
func (o CertificateSpecKeystoresOutput) Jks() CertificateSpecKeystoresJksPtrOutput {
	return o.ApplyT(func (v CertificateSpecKeystores) *CertificateSpecKeystoresJks { return v.Jks }).(CertificateSpecKeystoresJksPtrOutput)
}

// PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
func (o CertificateSpecKeystoresOutput) Pkcs12() CertificateSpecKeystoresPkcs12PtrOutput {
	return o.ApplyT(func (v CertificateSpecKeystores) *CertificateSpecKeystoresPkcs12 { return v.Pkcs12 }).(CertificateSpecKeystoresPkcs12PtrOutput)
}

type CertificateSpecKeystoresPtrOutput struct { *pulumi.OutputState }

func (CertificateSpecKeystoresPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSpecKeystores)(nil)).Elem()
}

func (o CertificateSpecKeystoresPtrOutput) ToCertificateSpecKeystoresPtrOutput() CertificateSpecKeystoresPtrOutput {
	return o
}

func (o CertificateSpecKeystoresPtrOutput) ToCertificateSpecKeystoresPtrOutputWithContext(ctx context.Context) CertificateSpecKeystoresPtrOutput {
	return o
}

func (o CertificateSpecKeystoresPtrOutput) Elem() CertificateSpecKeystoresOutput {
	return o.ApplyT(func (v *CertificateSpecKeystores) CertificateSpecKeystores { return *v }).(CertificateSpecKeystoresOutput)
}

// JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
func (o CertificateSpecKeystoresPtrOutput) Jks() CertificateSpecKeystoresJksPtrOutput {
	return o.ApplyT(func (v *CertificateSpecKeystores) *CertificateSpecKeystoresJks {
		if v == nil {
			return nil
		}
		return v.Jks
	}).(CertificateSpecKeystoresJksPtrOutput)
}

// PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
func (o CertificateSpecKeystoresPtrOutput) Pkcs12() CertificateSpecKeystoresPkcs12PtrOutput {
	return o.ApplyT(func (v *CertificateSpecKeystores) *CertificateSpecKeystoresPkcs12 {
		if v == nil {
			return nil
		}
		return v.Pkcs12
	}).(CertificateSpecKeystoresPkcs12PtrOutput)
}

// JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
type CertificateSpecKeystoresJks struct {
	// Create enables JKS keystore creation for the Certificate. If true, a file named `keystore.jks` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance.
	Create bool `pulumi:"create"`
	// PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
	PasswordSecretRef CertificateSpecKeystoresJksPasswordSecretRef `pulumi:"passwordSecretRef"`
}

// CertificateSpecKeystoresJksInput is an input type that accepts CertificateSpecKeystoresJksArgs and CertificateSpecKeystoresJksOutput values.
// You can construct a concrete instance of `CertificateSpecKeystoresJksInput` via:
//
//          CertificateSpecKeystoresJksArgs{...}
type CertificateSpecKeystoresJksInput interface {
	pulumi.Input

	ToCertificateSpecKeystoresJksOutput() CertificateSpecKeystoresJksOutput
	ToCertificateSpecKeystoresJksOutputWithContext(context.Context) CertificateSpecKeystoresJksOutput
}

// JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
type CertificateSpecKeystoresJksArgs struct {
	// Create enables JKS keystore creation for the Certificate. If true, a file named `keystore.jks` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance.
	Create pulumi.BoolInput `pulumi:"create"`
	// PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
	PasswordSecretRef CertificateSpecKeystoresJksPasswordSecretRefInput `pulumi:"passwordSecretRef"`
}

func (CertificateSpecKeystoresJksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSpecKeystoresJks)(nil)).Elem()
}

func (i CertificateSpecKeystoresJksArgs) ToCertificateSpecKeystoresJksOutput() CertificateSpecKeystoresJksOutput {
	return i.ToCertificateSpecKeystoresJksOutputWithContext(context.Background())
}

func (i CertificateSpecKeystoresJksArgs) ToCertificateSpecKeystoresJksOutputWithContext(ctx context.Context) CertificateSpecKeystoresJksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSpecKeystoresJksOutput)
}

func (i CertificateSpecKeystoresJksArgs) ToCertificateSpecKeystoresJksPtrOutput() CertificateSpecKeystoresJksPtrOutput {
	return i.ToCertificateSpecKeystoresJksPtrOutputWithContext(context.Background())
}

func (i CertificateSpecKeystoresJksArgs) ToCertificateSpecKeystoresJksPtrOutputWithContext(ctx context.Context) CertificateSpecKeystoresJksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSpecKeystoresJksOutput).ToCertificateSpecKeystoresJksPtrOutputWithContext(ctx)
}

// CertificateSpecKeystoresJksPtrInput is an input type that accepts CertificateSpecKeystoresJksArgs, CertificateSpecKeystoresJksPtr and CertificateSpecKeystoresJksPtrOutput values.
// You can construct a concrete instance of `CertificateSpecKeystoresJksPtrInput` via:
//
//          CertificateSpecKeystoresJksArgs{...}
//
//  or:
//
//          nil
type CertificateSpecKeystoresJksPtrInput interface {
	pulumi.Input

	ToCertificateSpecKeystoresJksPtrOutput() CertificateSpecKeystoresJksPtrOutput
	ToCertificateSpecKeystoresJksPtrOutputWithContext(context.Context) CertificateSpecKeystoresJksPtrOutput
}

type certificateSpecKeystoresJksPtrType CertificateSpecKeystoresJksArgs

func CertificateSpecKeystoresJksPtr(v *CertificateSpecKeystoresJksArgs) CertificateSpecKeystoresJksPtrInput {	return (*certificateSpecKeystoresJksPtrType)(v)
}

func (*certificateSpecKeystoresJksPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSpecKeystoresJks)(nil)).Elem()
}

func (i *certificateSpecKeystoresJksPtrType) ToCertificateSpecKeystoresJksPtrOutput() CertificateSpecKeystoresJksPtrOutput {
	return i.ToCertificateSpecKeystoresJksPtrOutputWithContext(context.Background())
}

func (i *certificateSpecKeystoresJksPtrType) ToCertificateSpecKeystoresJksPtrOutputWithContext(ctx context.Context) CertificateSpecKeystoresJksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSpecKeystoresJksPtrOutput)
}

// JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
type CertificateSpecKeystoresJksOutput struct { *pulumi.OutputState }

func (CertificateSpecKeystoresJksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSpecKeystoresJks)(nil)).Elem()
}

func (o CertificateSpecKeystoresJksOutput) ToCertificateSpecKeystoresJksOutput() CertificateSpecKeystoresJksOutput {
	return o
}

func (o CertificateSpecKeystoresJksOutput) ToCertificateSpecKeystoresJksOutputWithContext(ctx context.Context) CertificateSpecKeystoresJksOutput {
	return o
}

func (o CertificateSpecKeystoresJksOutput) ToCertificateSpecKeystoresJksPtrOutput() CertificateSpecKeystoresJksPtrOutput {
	return o.ToCertificateSpecKeystoresJksPtrOutputWithContext(context.Background())
}

func (o CertificateSpecKeystoresJksOutput) ToCertificateSpecKeystoresJksPtrOutputWithContext(ctx context.Context) CertificateSpecKeystoresJksPtrOutput {
	return o.ApplyT(func(v CertificateSpecKeystoresJks) *CertificateSpecKeystoresJks {
		return &v
	}).(CertificateSpecKeystoresJksPtrOutput)
}
// Create enables JKS keystore creation for the Certificate. If true, a file named `keystore.jks` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance.
func (o CertificateSpecKeystoresJksOutput) Create() pulumi.BoolOutput {
	return o.ApplyT(func (v CertificateSpecKeystoresJks) bool { return v.Create }).(pulumi.BoolOutput)
}

// PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
func (o CertificateSpecKeystoresJksOutput) PasswordSecretRef() CertificateSpecKeystoresJksPasswordSecretRefOutput {
	return o.ApplyT(func (v CertificateSpecKeystoresJks) CertificateSpecKeystoresJksPasswordSecretRef { return v.PasswordSecretRef }).(CertificateSpecKeystoresJksPasswordSecretRefOutput)
}

type CertificateSpecKeystoresJksPtrOutput struct { *pulumi.OutputState }

func (CertificateSpecKeystoresJksPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSpecKeystoresJks)(nil)).Elem()
}

func (o CertificateSpecKeystoresJksPtrOutput) ToCertificateSpecKeystoresJksPtrOutput() CertificateSpecKeystoresJksPtrOutput {
	return o
}

func (o CertificateSpecKeystoresJksPtrOutput) ToCertificateSpecKeystoresJksPtrOutputWithContext(ctx context.Context) CertificateSpecKeystoresJksPtrOutput {
	return o
}

func (o CertificateSpecKeystoresJksPtrOutput) Elem() CertificateSpecKeystoresJksOutput {
	return o.ApplyT(func (v *CertificateSpecKeystoresJks) CertificateSpecKeystoresJks { return *v }).(CertificateSpecKeystoresJksOutput)
}

// Create enables JKS keystore creation for the Certificate. If true, a file named `keystore.jks` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance.
func (o CertificateSpecKeystoresJksPtrOutput) Create() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v *CertificateSpecKeystoresJks) *bool {
		if v == nil {
			return nil
		}
		return &v.Create
	}).(pulumi.BoolPtrOutput)
}

// PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
func (o CertificateSpecKeystoresJksPtrOutput) PasswordSecretRef() CertificateSpecKeystoresJksPasswordSecretRefPtrOutput {
	return o.ApplyT(func (v *CertificateSpecKeystoresJks) *CertificateSpecKeystoresJksPasswordSecretRef {
		if v == nil {
			return nil
		}
		return &v.PasswordSecretRef
	}).(CertificateSpecKeystoresJksPasswordSecretRefPtrOutput)
}

// PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
type CertificateSpecKeystoresJksPasswordSecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name string `pulumi:"name"`
}

// CertificateSpecKeystoresJksPasswordSecretRefInput is an input type that accepts CertificateSpecKeystoresJksPasswordSecretRefArgs and CertificateSpecKeystoresJksPasswordSecretRefOutput values.
// You can construct a concrete instance of `CertificateSpecKeystoresJksPasswordSecretRefInput` via:
//
//          CertificateSpecKeystoresJksPasswordSecretRefArgs{...}
type CertificateSpecKeystoresJksPasswordSecretRefInput interface {
	pulumi.Input

	ToCertificateSpecKeystoresJksPasswordSecretRefOutput() CertificateSpecKeystoresJksPasswordSecretRefOutput
	ToCertificateSpecKeystoresJksPasswordSecretRefOutputWithContext(context.Context) CertificateSpecKeystoresJksPasswordSecretRefOutput
}

// PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
type CertificateSpecKeystoresJksPasswordSecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringInput `pulumi:"name"`
}

func (CertificateSpecKeystoresJksPasswordSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSpecKeystoresJksPasswordSecretRef)(nil)).Elem()
}

func (i CertificateSpecKeystoresJksPasswordSecretRefArgs) ToCertificateSpecKeystoresJksPasswordSecretRefOutput() CertificateSpecKeystoresJksPasswordSecretRefOutput {
	return i.ToCertificateSpecKeystoresJksPasswordSecretRefOutputWithContext(context.Background())
}

func (i CertificateSpecKeystoresJksPasswordSecretRefArgs) ToCertificateSpecKeystoresJksPasswordSecretRefOutputWithContext(ctx context.Context) CertificateSpecKeystoresJksPasswordSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSpecKeystoresJksPasswordSecretRefOutput)
}

func (i CertificateSpecKeystoresJksPasswordSecretRefArgs) ToCertificateSpecKeystoresJksPasswordSecretRefPtrOutput() CertificateSpecKeystoresJksPasswordSecretRefPtrOutput {
	return i.ToCertificateSpecKeystoresJksPasswordSecretRefPtrOutputWithContext(context.Background())
}

func (i CertificateSpecKeystoresJksPasswordSecretRefArgs) ToCertificateSpecKeystoresJksPasswordSecretRefPtrOutputWithContext(ctx context.Context) CertificateSpecKeystoresJksPasswordSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSpecKeystoresJksPasswordSecretRefOutput).ToCertificateSpecKeystoresJksPasswordSecretRefPtrOutputWithContext(ctx)
}

// CertificateSpecKeystoresJksPasswordSecretRefPtrInput is an input type that accepts CertificateSpecKeystoresJksPasswordSecretRefArgs, CertificateSpecKeystoresJksPasswordSecretRefPtr and CertificateSpecKeystoresJksPasswordSecretRefPtrOutput values.
// You can construct a concrete instance of `CertificateSpecKeystoresJksPasswordSecretRefPtrInput` via:
//
//          CertificateSpecKeystoresJksPasswordSecretRefArgs{...}
//
//  or:
//
//          nil
type CertificateSpecKeystoresJksPasswordSecretRefPtrInput interface {
	pulumi.Input

	ToCertificateSpecKeystoresJksPasswordSecretRefPtrOutput() CertificateSpecKeystoresJksPasswordSecretRefPtrOutput
	ToCertificateSpecKeystoresJksPasswordSecretRefPtrOutputWithContext(context.Context) CertificateSpecKeystoresJksPasswordSecretRefPtrOutput
}

type certificateSpecKeystoresJksPasswordSecretRefPtrType CertificateSpecKeystoresJksPasswordSecretRefArgs

func CertificateSpecKeystoresJksPasswordSecretRefPtr(v *CertificateSpecKeystoresJksPasswordSecretRefArgs) CertificateSpecKeystoresJksPasswordSecretRefPtrInput {	return (*certificateSpecKeystoresJksPasswordSecretRefPtrType)(v)
}

func (*certificateSpecKeystoresJksPasswordSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSpecKeystoresJksPasswordSecretRef)(nil)).Elem()
}

func (i *certificateSpecKeystoresJksPasswordSecretRefPtrType) ToCertificateSpecKeystoresJksPasswordSecretRefPtrOutput() CertificateSpecKeystoresJksPasswordSecretRefPtrOutput {
	return i.ToCertificateSpecKeystoresJksPasswordSecretRefPtrOutputWithContext(context.Background())
}

func (i *certificateSpecKeystoresJksPasswordSecretRefPtrType) ToCertificateSpecKeystoresJksPasswordSecretRefPtrOutputWithContext(ctx context.Context) CertificateSpecKeystoresJksPasswordSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSpecKeystoresJksPasswordSecretRefPtrOutput)
}

// PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
type CertificateSpecKeystoresJksPasswordSecretRefOutput struct { *pulumi.OutputState }

func (CertificateSpecKeystoresJksPasswordSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSpecKeystoresJksPasswordSecretRef)(nil)).Elem()
}

func (o CertificateSpecKeystoresJksPasswordSecretRefOutput) ToCertificateSpecKeystoresJksPasswordSecretRefOutput() CertificateSpecKeystoresJksPasswordSecretRefOutput {
	return o
}

func (o CertificateSpecKeystoresJksPasswordSecretRefOutput) ToCertificateSpecKeystoresJksPasswordSecretRefOutputWithContext(ctx context.Context) CertificateSpecKeystoresJksPasswordSecretRefOutput {
	return o
}

func (o CertificateSpecKeystoresJksPasswordSecretRefOutput) ToCertificateSpecKeystoresJksPasswordSecretRefPtrOutput() CertificateSpecKeystoresJksPasswordSecretRefPtrOutput {
	return o.ToCertificateSpecKeystoresJksPasswordSecretRefPtrOutputWithContext(context.Background())
}

func (o CertificateSpecKeystoresJksPasswordSecretRefOutput) ToCertificateSpecKeystoresJksPasswordSecretRefPtrOutputWithContext(ctx context.Context) CertificateSpecKeystoresJksPasswordSecretRefPtrOutput {
	return o.ApplyT(func(v CertificateSpecKeystoresJksPasswordSecretRef) *CertificateSpecKeystoresJksPasswordSecretRef {
		return &v
	}).(CertificateSpecKeystoresJksPasswordSecretRefPtrOutput)
}
// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
func (o CertificateSpecKeystoresJksPasswordSecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateSpecKeystoresJksPasswordSecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o CertificateSpecKeystoresJksPasswordSecretRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v CertificateSpecKeystoresJksPasswordSecretRef) string { return v.Name }).(pulumi.StringOutput)
}

type CertificateSpecKeystoresJksPasswordSecretRefPtrOutput struct { *pulumi.OutputState }

func (CertificateSpecKeystoresJksPasswordSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSpecKeystoresJksPasswordSecretRef)(nil)).Elem()
}

func (o CertificateSpecKeystoresJksPasswordSecretRefPtrOutput) ToCertificateSpecKeystoresJksPasswordSecretRefPtrOutput() CertificateSpecKeystoresJksPasswordSecretRefPtrOutput {
	return o
}

func (o CertificateSpecKeystoresJksPasswordSecretRefPtrOutput) ToCertificateSpecKeystoresJksPasswordSecretRefPtrOutputWithContext(ctx context.Context) CertificateSpecKeystoresJksPasswordSecretRefPtrOutput {
	return o
}

func (o CertificateSpecKeystoresJksPasswordSecretRefPtrOutput) Elem() CertificateSpecKeystoresJksPasswordSecretRefOutput {
	return o.ApplyT(func (v *CertificateSpecKeystoresJksPasswordSecretRef) CertificateSpecKeystoresJksPasswordSecretRef { return *v }).(CertificateSpecKeystoresJksPasswordSecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
func (o CertificateSpecKeystoresJksPasswordSecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func (v *CertificateSpecKeystoresJksPasswordSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o CertificateSpecKeystoresJksPasswordSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func (v *CertificateSpecKeystoresJksPasswordSecretRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
type CertificateSpecKeystoresPkcs12 struct {
	// Create enables PKCS12 keystore creation for the Certificate. If true, a file named `keystore.p12` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance.
	Create bool `pulumi:"create"`
	// PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
	PasswordSecretRef CertificateSpecKeystoresPkcs12PasswordSecretRef `pulumi:"passwordSecretRef"`
}

// CertificateSpecKeystoresPkcs12Input is an input type that accepts CertificateSpecKeystoresPkcs12Args and CertificateSpecKeystoresPkcs12Output values.
// You can construct a concrete instance of `CertificateSpecKeystoresPkcs12Input` via:
//
//          CertificateSpecKeystoresPkcs12Args{...}
type CertificateSpecKeystoresPkcs12Input interface {
	pulumi.Input

	ToCertificateSpecKeystoresPkcs12Output() CertificateSpecKeystoresPkcs12Output
	ToCertificateSpecKeystoresPkcs12OutputWithContext(context.Context) CertificateSpecKeystoresPkcs12Output
}

// PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
type CertificateSpecKeystoresPkcs12Args struct {
	// Create enables PKCS12 keystore creation for the Certificate. If true, a file named `keystore.p12` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance.
	Create pulumi.BoolInput `pulumi:"create"`
	// PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
	PasswordSecretRef CertificateSpecKeystoresPkcs12PasswordSecretRefInput `pulumi:"passwordSecretRef"`
}

func (CertificateSpecKeystoresPkcs12Args) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSpecKeystoresPkcs12)(nil)).Elem()
}

func (i CertificateSpecKeystoresPkcs12Args) ToCertificateSpecKeystoresPkcs12Output() CertificateSpecKeystoresPkcs12Output {
	return i.ToCertificateSpecKeystoresPkcs12OutputWithContext(context.Background())
}

func (i CertificateSpecKeystoresPkcs12Args) ToCertificateSpecKeystoresPkcs12OutputWithContext(ctx context.Context) CertificateSpecKeystoresPkcs12Output {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSpecKeystoresPkcs12Output)
}

func (i CertificateSpecKeystoresPkcs12Args) ToCertificateSpecKeystoresPkcs12PtrOutput() CertificateSpecKeystoresPkcs12PtrOutput {
	return i.ToCertificateSpecKeystoresPkcs12PtrOutputWithContext(context.Background())
}

func (i CertificateSpecKeystoresPkcs12Args) ToCertificateSpecKeystoresPkcs12PtrOutputWithContext(ctx context.Context) CertificateSpecKeystoresPkcs12PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSpecKeystoresPkcs12Output).ToCertificateSpecKeystoresPkcs12PtrOutputWithContext(ctx)
}

// CertificateSpecKeystoresPkcs12PtrInput is an input type that accepts CertificateSpecKeystoresPkcs12Args, CertificateSpecKeystoresPkcs12Ptr and CertificateSpecKeystoresPkcs12PtrOutput values.
// You can construct a concrete instance of `CertificateSpecKeystoresPkcs12PtrInput` via:
//
//          CertificateSpecKeystoresPkcs12Args{...}
//
//  or:
//
//          nil
type CertificateSpecKeystoresPkcs12PtrInput interface {
	pulumi.Input

	ToCertificateSpecKeystoresPkcs12PtrOutput() CertificateSpecKeystoresPkcs12PtrOutput
	ToCertificateSpecKeystoresPkcs12PtrOutputWithContext(context.Context) CertificateSpecKeystoresPkcs12PtrOutput
}

type certificateSpecKeystoresPkcs12PtrType CertificateSpecKeystoresPkcs12Args

func CertificateSpecKeystoresPkcs12Ptr(v *CertificateSpecKeystoresPkcs12Args) CertificateSpecKeystoresPkcs12PtrInput {	return (*certificateSpecKeystoresPkcs12PtrType)(v)
}

func (*certificateSpecKeystoresPkcs12PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSpecKeystoresPkcs12)(nil)).Elem()
}

func (i *certificateSpecKeystoresPkcs12PtrType) ToCertificateSpecKeystoresPkcs12PtrOutput() CertificateSpecKeystoresPkcs12PtrOutput {
	return i.ToCertificateSpecKeystoresPkcs12PtrOutputWithContext(context.Background())
}

func (i *certificateSpecKeystoresPkcs12PtrType) ToCertificateSpecKeystoresPkcs12PtrOutputWithContext(ctx context.Context) CertificateSpecKeystoresPkcs12PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSpecKeystoresPkcs12PtrOutput)
}

// PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
type CertificateSpecKeystoresPkcs12Output struct { *pulumi.OutputState }

func (CertificateSpecKeystoresPkcs12Output) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSpecKeystoresPkcs12)(nil)).Elem()
}

func (o CertificateSpecKeystoresPkcs12Output) ToCertificateSpecKeystoresPkcs12Output() CertificateSpecKeystoresPkcs12Output {
	return o
}

func (o CertificateSpecKeystoresPkcs12Output) ToCertificateSpecKeystoresPkcs12OutputWithContext(ctx context.Context) CertificateSpecKeystoresPkcs12Output {
	return o
}

func (o CertificateSpecKeystoresPkcs12Output) ToCertificateSpecKeystoresPkcs12PtrOutput() CertificateSpecKeystoresPkcs12PtrOutput {
	return o.ToCertificateSpecKeystoresPkcs12PtrOutputWithContext(context.Background())
}

func (o CertificateSpecKeystoresPkcs12Output) ToCertificateSpecKeystoresPkcs12PtrOutputWithContext(ctx context.Context) CertificateSpecKeystoresPkcs12PtrOutput {
	return o.ApplyT(func(v CertificateSpecKeystoresPkcs12) *CertificateSpecKeystoresPkcs12 {
		return &v
	}).(CertificateSpecKeystoresPkcs12PtrOutput)
}
// Create enables PKCS12 keystore creation for the Certificate. If true, a file named `keystore.p12` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance.
func (o CertificateSpecKeystoresPkcs12Output) Create() pulumi.BoolOutput {
	return o.ApplyT(func (v CertificateSpecKeystoresPkcs12) bool { return v.Create }).(pulumi.BoolOutput)
}

// PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
func (o CertificateSpecKeystoresPkcs12Output) PasswordSecretRef() CertificateSpecKeystoresPkcs12PasswordSecretRefOutput {
	return o.ApplyT(func (v CertificateSpecKeystoresPkcs12) CertificateSpecKeystoresPkcs12PasswordSecretRef { return v.PasswordSecretRef }).(CertificateSpecKeystoresPkcs12PasswordSecretRefOutput)
}

type CertificateSpecKeystoresPkcs12PtrOutput struct { *pulumi.OutputState }

func (CertificateSpecKeystoresPkcs12PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSpecKeystoresPkcs12)(nil)).Elem()
}

func (o CertificateSpecKeystoresPkcs12PtrOutput) ToCertificateSpecKeystoresPkcs12PtrOutput() CertificateSpecKeystoresPkcs12PtrOutput {
	return o
}

func (o CertificateSpecKeystoresPkcs12PtrOutput) ToCertificateSpecKeystoresPkcs12PtrOutputWithContext(ctx context.Context) CertificateSpecKeystoresPkcs12PtrOutput {
	return o
}

func (o CertificateSpecKeystoresPkcs12PtrOutput) Elem() CertificateSpecKeystoresPkcs12Output {
	return o.ApplyT(func (v *CertificateSpecKeystoresPkcs12) CertificateSpecKeystoresPkcs12 { return *v }).(CertificateSpecKeystoresPkcs12Output)
}

// Create enables PKCS12 keystore creation for the Certificate. If true, a file named `keystore.p12` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance.
func (o CertificateSpecKeystoresPkcs12PtrOutput) Create() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v *CertificateSpecKeystoresPkcs12) *bool {
		if v == nil {
			return nil
		}
		return &v.Create
	}).(pulumi.BoolPtrOutput)
}

// PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
func (o CertificateSpecKeystoresPkcs12PtrOutput) PasswordSecretRef() CertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutput {
	return o.ApplyT(func (v *CertificateSpecKeystoresPkcs12) *CertificateSpecKeystoresPkcs12PasswordSecretRef {
		if v == nil {
			return nil
		}
		return &v.PasswordSecretRef
	}).(CertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutput)
}

// PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
type CertificateSpecKeystoresPkcs12PasswordSecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name string `pulumi:"name"`
}

// CertificateSpecKeystoresPkcs12PasswordSecretRefInput is an input type that accepts CertificateSpecKeystoresPkcs12PasswordSecretRefArgs and CertificateSpecKeystoresPkcs12PasswordSecretRefOutput values.
// You can construct a concrete instance of `CertificateSpecKeystoresPkcs12PasswordSecretRefInput` via:
//
//          CertificateSpecKeystoresPkcs12PasswordSecretRefArgs{...}
type CertificateSpecKeystoresPkcs12PasswordSecretRefInput interface {
	pulumi.Input

	ToCertificateSpecKeystoresPkcs12PasswordSecretRefOutput() CertificateSpecKeystoresPkcs12PasswordSecretRefOutput
	ToCertificateSpecKeystoresPkcs12PasswordSecretRefOutputWithContext(context.Context) CertificateSpecKeystoresPkcs12PasswordSecretRefOutput
}

// PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
type CertificateSpecKeystoresPkcs12PasswordSecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringInput `pulumi:"name"`
}

func (CertificateSpecKeystoresPkcs12PasswordSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSpecKeystoresPkcs12PasswordSecretRef)(nil)).Elem()
}

func (i CertificateSpecKeystoresPkcs12PasswordSecretRefArgs) ToCertificateSpecKeystoresPkcs12PasswordSecretRefOutput() CertificateSpecKeystoresPkcs12PasswordSecretRefOutput {
	return i.ToCertificateSpecKeystoresPkcs12PasswordSecretRefOutputWithContext(context.Background())
}

func (i CertificateSpecKeystoresPkcs12PasswordSecretRefArgs) ToCertificateSpecKeystoresPkcs12PasswordSecretRefOutputWithContext(ctx context.Context) CertificateSpecKeystoresPkcs12PasswordSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSpecKeystoresPkcs12PasswordSecretRefOutput)
}

func (i CertificateSpecKeystoresPkcs12PasswordSecretRefArgs) ToCertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutput() CertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutput {
	return i.ToCertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutputWithContext(context.Background())
}

func (i CertificateSpecKeystoresPkcs12PasswordSecretRefArgs) ToCertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutputWithContext(ctx context.Context) CertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSpecKeystoresPkcs12PasswordSecretRefOutput).ToCertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutputWithContext(ctx)
}

// CertificateSpecKeystoresPkcs12PasswordSecretRefPtrInput is an input type that accepts CertificateSpecKeystoresPkcs12PasswordSecretRefArgs, CertificateSpecKeystoresPkcs12PasswordSecretRefPtr and CertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutput values.
// You can construct a concrete instance of `CertificateSpecKeystoresPkcs12PasswordSecretRefPtrInput` via:
//
//          CertificateSpecKeystoresPkcs12PasswordSecretRefArgs{...}
//
//  or:
//
//          nil
type CertificateSpecKeystoresPkcs12PasswordSecretRefPtrInput interface {
	pulumi.Input

	ToCertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutput() CertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutput
	ToCertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutputWithContext(context.Context) CertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutput
}

type certificateSpecKeystoresPkcs12PasswordSecretRefPtrType CertificateSpecKeystoresPkcs12PasswordSecretRefArgs

func CertificateSpecKeystoresPkcs12PasswordSecretRefPtr(v *CertificateSpecKeystoresPkcs12PasswordSecretRefArgs) CertificateSpecKeystoresPkcs12PasswordSecretRefPtrInput {	return (*certificateSpecKeystoresPkcs12PasswordSecretRefPtrType)(v)
}

func (*certificateSpecKeystoresPkcs12PasswordSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSpecKeystoresPkcs12PasswordSecretRef)(nil)).Elem()
}

func (i *certificateSpecKeystoresPkcs12PasswordSecretRefPtrType) ToCertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutput() CertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutput {
	return i.ToCertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutputWithContext(context.Background())
}

func (i *certificateSpecKeystoresPkcs12PasswordSecretRefPtrType) ToCertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutputWithContext(ctx context.Context) CertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutput)
}

// PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
type CertificateSpecKeystoresPkcs12PasswordSecretRefOutput struct { *pulumi.OutputState }

func (CertificateSpecKeystoresPkcs12PasswordSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSpecKeystoresPkcs12PasswordSecretRef)(nil)).Elem()
}

func (o CertificateSpecKeystoresPkcs12PasswordSecretRefOutput) ToCertificateSpecKeystoresPkcs12PasswordSecretRefOutput() CertificateSpecKeystoresPkcs12PasswordSecretRefOutput {
	return o
}

func (o CertificateSpecKeystoresPkcs12PasswordSecretRefOutput) ToCertificateSpecKeystoresPkcs12PasswordSecretRefOutputWithContext(ctx context.Context) CertificateSpecKeystoresPkcs12PasswordSecretRefOutput {
	return o
}

func (o CertificateSpecKeystoresPkcs12PasswordSecretRefOutput) ToCertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutput() CertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutput {
	return o.ToCertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutputWithContext(context.Background())
}

func (o CertificateSpecKeystoresPkcs12PasswordSecretRefOutput) ToCertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutputWithContext(ctx context.Context) CertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutput {
	return o.ApplyT(func(v CertificateSpecKeystoresPkcs12PasswordSecretRef) *CertificateSpecKeystoresPkcs12PasswordSecretRef {
		return &v
	}).(CertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutput)
}
// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
func (o CertificateSpecKeystoresPkcs12PasswordSecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateSpecKeystoresPkcs12PasswordSecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o CertificateSpecKeystoresPkcs12PasswordSecretRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v CertificateSpecKeystoresPkcs12PasswordSecretRef) string { return v.Name }).(pulumi.StringOutput)
}

type CertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutput struct { *pulumi.OutputState }

func (CertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSpecKeystoresPkcs12PasswordSecretRef)(nil)).Elem()
}

func (o CertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutput) ToCertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutput() CertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutput {
	return o
}

func (o CertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutput) ToCertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutputWithContext(ctx context.Context) CertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutput {
	return o
}

func (o CertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutput) Elem() CertificateSpecKeystoresPkcs12PasswordSecretRefOutput {
	return o.ApplyT(func (v *CertificateSpecKeystoresPkcs12PasswordSecretRef) CertificateSpecKeystoresPkcs12PasswordSecretRef { return *v }).(CertificateSpecKeystoresPkcs12PasswordSecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
func (o CertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func (v *CertificateSpecKeystoresPkcs12PasswordSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o CertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func (v *CertificateSpecKeystoresPkcs12PasswordSecretRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Options to control private keys used for the Certificate.
type CertificateSpecPrivateKey struct {
	// RotationPolicy controls how private keys should be regenerated when a re-issuance is being processed. If set to Never, a private key will only be generated if one does not already exist in the target `spec.secretName`. If one does exists but it does not have the correct algorithm or size, a warning will be raised to await user intervention. If set to Always, a private key matching the specified requirements will be generated whenever a re-issuance occurs. Default is 'Never' for backward compatibility.
	RotationPolicy *string `pulumi:"rotationPolicy"`
}

// CertificateSpecPrivateKeyInput is an input type that accepts CertificateSpecPrivateKeyArgs and CertificateSpecPrivateKeyOutput values.
// You can construct a concrete instance of `CertificateSpecPrivateKeyInput` via:
//
//          CertificateSpecPrivateKeyArgs{...}
type CertificateSpecPrivateKeyInput interface {
	pulumi.Input

	ToCertificateSpecPrivateKeyOutput() CertificateSpecPrivateKeyOutput
	ToCertificateSpecPrivateKeyOutputWithContext(context.Context) CertificateSpecPrivateKeyOutput
}

// Options to control private keys used for the Certificate.
type CertificateSpecPrivateKeyArgs struct {
	// RotationPolicy controls how private keys should be regenerated when a re-issuance is being processed. If set to Never, a private key will only be generated if one does not already exist in the target `spec.secretName`. If one does exists but it does not have the correct algorithm or size, a warning will be raised to await user intervention. If set to Always, a private key matching the specified requirements will be generated whenever a re-issuance occurs. Default is 'Never' for backward compatibility.
	RotationPolicy pulumi.StringPtrInput `pulumi:"rotationPolicy"`
}

func (CertificateSpecPrivateKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSpecPrivateKey)(nil)).Elem()
}

func (i CertificateSpecPrivateKeyArgs) ToCertificateSpecPrivateKeyOutput() CertificateSpecPrivateKeyOutput {
	return i.ToCertificateSpecPrivateKeyOutputWithContext(context.Background())
}

func (i CertificateSpecPrivateKeyArgs) ToCertificateSpecPrivateKeyOutputWithContext(ctx context.Context) CertificateSpecPrivateKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSpecPrivateKeyOutput)
}

func (i CertificateSpecPrivateKeyArgs) ToCertificateSpecPrivateKeyPtrOutput() CertificateSpecPrivateKeyPtrOutput {
	return i.ToCertificateSpecPrivateKeyPtrOutputWithContext(context.Background())
}

func (i CertificateSpecPrivateKeyArgs) ToCertificateSpecPrivateKeyPtrOutputWithContext(ctx context.Context) CertificateSpecPrivateKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSpecPrivateKeyOutput).ToCertificateSpecPrivateKeyPtrOutputWithContext(ctx)
}

// CertificateSpecPrivateKeyPtrInput is an input type that accepts CertificateSpecPrivateKeyArgs, CertificateSpecPrivateKeyPtr and CertificateSpecPrivateKeyPtrOutput values.
// You can construct a concrete instance of `CertificateSpecPrivateKeyPtrInput` via:
//
//          CertificateSpecPrivateKeyArgs{...}
//
//  or:
//
//          nil
type CertificateSpecPrivateKeyPtrInput interface {
	pulumi.Input

	ToCertificateSpecPrivateKeyPtrOutput() CertificateSpecPrivateKeyPtrOutput
	ToCertificateSpecPrivateKeyPtrOutputWithContext(context.Context) CertificateSpecPrivateKeyPtrOutput
}

type certificateSpecPrivateKeyPtrType CertificateSpecPrivateKeyArgs

func CertificateSpecPrivateKeyPtr(v *CertificateSpecPrivateKeyArgs) CertificateSpecPrivateKeyPtrInput {	return (*certificateSpecPrivateKeyPtrType)(v)
}

func (*certificateSpecPrivateKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSpecPrivateKey)(nil)).Elem()
}

func (i *certificateSpecPrivateKeyPtrType) ToCertificateSpecPrivateKeyPtrOutput() CertificateSpecPrivateKeyPtrOutput {
	return i.ToCertificateSpecPrivateKeyPtrOutputWithContext(context.Background())
}

func (i *certificateSpecPrivateKeyPtrType) ToCertificateSpecPrivateKeyPtrOutputWithContext(ctx context.Context) CertificateSpecPrivateKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSpecPrivateKeyPtrOutput)
}

// Options to control private keys used for the Certificate.
type CertificateSpecPrivateKeyOutput struct { *pulumi.OutputState }

func (CertificateSpecPrivateKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSpecPrivateKey)(nil)).Elem()
}

func (o CertificateSpecPrivateKeyOutput) ToCertificateSpecPrivateKeyOutput() CertificateSpecPrivateKeyOutput {
	return o
}

func (o CertificateSpecPrivateKeyOutput) ToCertificateSpecPrivateKeyOutputWithContext(ctx context.Context) CertificateSpecPrivateKeyOutput {
	return o
}

func (o CertificateSpecPrivateKeyOutput) ToCertificateSpecPrivateKeyPtrOutput() CertificateSpecPrivateKeyPtrOutput {
	return o.ToCertificateSpecPrivateKeyPtrOutputWithContext(context.Background())
}

func (o CertificateSpecPrivateKeyOutput) ToCertificateSpecPrivateKeyPtrOutputWithContext(ctx context.Context) CertificateSpecPrivateKeyPtrOutput {
	return o.ApplyT(func(v CertificateSpecPrivateKey) *CertificateSpecPrivateKey {
		return &v
	}).(CertificateSpecPrivateKeyPtrOutput)
}
// RotationPolicy controls how private keys should be regenerated when a re-issuance is being processed. If set to Never, a private key will only be generated if one does not already exist in the target `spec.secretName`. If one does exists but it does not have the correct algorithm or size, a warning will be raised to await user intervention. If set to Always, a private key matching the specified requirements will be generated whenever a re-issuance occurs. Default is 'Never' for backward compatibility.
func (o CertificateSpecPrivateKeyOutput) RotationPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateSpecPrivateKey) *string { return v.RotationPolicy }).(pulumi.StringPtrOutput)
}

type CertificateSpecPrivateKeyPtrOutput struct { *pulumi.OutputState }

func (CertificateSpecPrivateKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSpecPrivateKey)(nil)).Elem()
}

func (o CertificateSpecPrivateKeyPtrOutput) ToCertificateSpecPrivateKeyPtrOutput() CertificateSpecPrivateKeyPtrOutput {
	return o
}

func (o CertificateSpecPrivateKeyPtrOutput) ToCertificateSpecPrivateKeyPtrOutputWithContext(ctx context.Context) CertificateSpecPrivateKeyPtrOutput {
	return o
}

func (o CertificateSpecPrivateKeyPtrOutput) Elem() CertificateSpecPrivateKeyOutput {
	return o.ApplyT(func (v *CertificateSpecPrivateKey) CertificateSpecPrivateKey { return *v }).(CertificateSpecPrivateKeyOutput)
}

// RotationPolicy controls how private keys should be regenerated when a re-issuance is being processed. If set to Never, a private key will only be generated if one does not already exist in the target `spec.secretName`. If one does exists but it does not have the correct algorithm or size, a warning will be raised to await user intervention. If set to Always, a private key matching the specified requirements will be generated whenever a re-issuance occurs. Default is 'Never' for backward compatibility.
func (o CertificateSpecPrivateKeyPtrOutput) RotationPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func (v *CertificateSpecPrivateKey) *string {
		if v == nil {
			return nil
		}
		return v.RotationPolicy
	}).(pulumi.StringPtrOutput)
}

// Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
type CertificateSpecSubject struct {
	// Countries to be used on the Certificate.
	Countries []string `pulumi:"countries"`
	// Cities to be used on the Certificate.
	Localities []string `pulumi:"localities"`
	// Organizational Units to be used on the Certificate.
	OrganizationalUnits []string `pulumi:"organizationalUnits"`
	// Organizations to be used on the Certificate.
	Organizations []string `pulumi:"organizations"`
	// Postal codes to be used on the Certificate.
	PostalCodes []string `pulumi:"postalCodes"`
	// State/Provinces to be used on the Certificate.
	Provinces []string `pulumi:"provinces"`
	// Serial number to be used on the Certificate.
	SerialNumber *string `pulumi:"serialNumber"`
	// Street addresses to be used on the Certificate.
	StreetAddresses []string `pulumi:"streetAddresses"`
}

// CertificateSpecSubjectInput is an input type that accepts CertificateSpecSubjectArgs and CertificateSpecSubjectOutput values.
// You can construct a concrete instance of `CertificateSpecSubjectInput` via:
//
//          CertificateSpecSubjectArgs{...}
type CertificateSpecSubjectInput interface {
	pulumi.Input

	ToCertificateSpecSubjectOutput() CertificateSpecSubjectOutput
	ToCertificateSpecSubjectOutputWithContext(context.Context) CertificateSpecSubjectOutput
}

// Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
type CertificateSpecSubjectArgs struct {
	// Countries to be used on the Certificate.
	Countries pulumi.StringArrayInput `pulumi:"countries"`
	// Cities to be used on the Certificate.
	Localities pulumi.StringArrayInput `pulumi:"localities"`
	// Organizational Units to be used on the Certificate.
	OrganizationalUnits pulumi.StringArrayInput `pulumi:"organizationalUnits"`
	// Organizations to be used on the Certificate.
	Organizations pulumi.StringArrayInput `pulumi:"organizations"`
	// Postal codes to be used on the Certificate.
	PostalCodes pulumi.StringArrayInput `pulumi:"postalCodes"`
	// State/Provinces to be used on the Certificate.
	Provinces pulumi.StringArrayInput `pulumi:"provinces"`
	// Serial number to be used on the Certificate.
	SerialNumber pulumi.StringPtrInput `pulumi:"serialNumber"`
	// Street addresses to be used on the Certificate.
	StreetAddresses pulumi.StringArrayInput `pulumi:"streetAddresses"`
}

func (CertificateSpecSubjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSpecSubject)(nil)).Elem()
}

func (i CertificateSpecSubjectArgs) ToCertificateSpecSubjectOutput() CertificateSpecSubjectOutput {
	return i.ToCertificateSpecSubjectOutputWithContext(context.Background())
}

func (i CertificateSpecSubjectArgs) ToCertificateSpecSubjectOutputWithContext(ctx context.Context) CertificateSpecSubjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSpecSubjectOutput)
}

func (i CertificateSpecSubjectArgs) ToCertificateSpecSubjectPtrOutput() CertificateSpecSubjectPtrOutput {
	return i.ToCertificateSpecSubjectPtrOutputWithContext(context.Background())
}

func (i CertificateSpecSubjectArgs) ToCertificateSpecSubjectPtrOutputWithContext(ctx context.Context) CertificateSpecSubjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSpecSubjectOutput).ToCertificateSpecSubjectPtrOutputWithContext(ctx)
}

// CertificateSpecSubjectPtrInput is an input type that accepts CertificateSpecSubjectArgs, CertificateSpecSubjectPtr and CertificateSpecSubjectPtrOutput values.
// You can construct a concrete instance of `CertificateSpecSubjectPtrInput` via:
//
//          CertificateSpecSubjectArgs{...}
//
//  or:
//
//          nil
type CertificateSpecSubjectPtrInput interface {
	pulumi.Input

	ToCertificateSpecSubjectPtrOutput() CertificateSpecSubjectPtrOutput
	ToCertificateSpecSubjectPtrOutputWithContext(context.Context) CertificateSpecSubjectPtrOutput
}

type certificateSpecSubjectPtrType CertificateSpecSubjectArgs

func CertificateSpecSubjectPtr(v *CertificateSpecSubjectArgs) CertificateSpecSubjectPtrInput {	return (*certificateSpecSubjectPtrType)(v)
}

func (*certificateSpecSubjectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSpecSubject)(nil)).Elem()
}

func (i *certificateSpecSubjectPtrType) ToCertificateSpecSubjectPtrOutput() CertificateSpecSubjectPtrOutput {
	return i.ToCertificateSpecSubjectPtrOutputWithContext(context.Background())
}

func (i *certificateSpecSubjectPtrType) ToCertificateSpecSubjectPtrOutputWithContext(ctx context.Context) CertificateSpecSubjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSpecSubjectPtrOutput)
}

// Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
type CertificateSpecSubjectOutput struct { *pulumi.OutputState }

func (CertificateSpecSubjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSpecSubject)(nil)).Elem()
}

func (o CertificateSpecSubjectOutput) ToCertificateSpecSubjectOutput() CertificateSpecSubjectOutput {
	return o
}

func (o CertificateSpecSubjectOutput) ToCertificateSpecSubjectOutputWithContext(ctx context.Context) CertificateSpecSubjectOutput {
	return o
}

func (o CertificateSpecSubjectOutput) ToCertificateSpecSubjectPtrOutput() CertificateSpecSubjectPtrOutput {
	return o.ToCertificateSpecSubjectPtrOutputWithContext(context.Background())
}

func (o CertificateSpecSubjectOutput) ToCertificateSpecSubjectPtrOutputWithContext(ctx context.Context) CertificateSpecSubjectPtrOutput {
	return o.ApplyT(func(v CertificateSpecSubject) *CertificateSpecSubject {
		return &v
	}).(CertificateSpecSubjectPtrOutput)
}
// Countries to be used on the Certificate.
func (o CertificateSpecSubjectOutput) Countries() pulumi.StringArrayOutput {
	return o.ApplyT(func (v CertificateSpecSubject) []string { return v.Countries }).(pulumi.StringArrayOutput)
}

// Cities to be used on the Certificate.
func (o CertificateSpecSubjectOutput) Localities() pulumi.StringArrayOutput {
	return o.ApplyT(func (v CertificateSpecSubject) []string { return v.Localities }).(pulumi.StringArrayOutput)
}

// Organizational Units to be used on the Certificate.
func (o CertificateSpecSubjectOutput) OrganizationalUnits() pulumi.StringArrayOutput {
	return o.ApplyT(func (v CertificateSpecSubject) []string { return v.OrganizationalUnits }).(pulumi.StringArrayOutput)
}

// Organizations to be used on the Certificate.
func (o CertificateSpecSubjectOutput) Organizations() pulumi.StringArrayOutput {
	return o.ApplyT(func (v CertificateSpecSubject) []string { return v.Organizations }).(pulumi.StringArrayOutput)
}

// Postal codes to be used on the Certificate.
func (o CertificateSpecSubjectOutput) PostalCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func (v CertificateSpecSubject) []string { return v.PostalCodes }).(pulumi.StringArrayOutput)
}

// State/Provinces to be used on the Certificate.
func (o CertificateSpecSubjectOutput) Provinces() pulumi.StringArrayOutput {
	return o.ApplyT(func (v CertificateSpecSubject) []string { return v.Provinces }).(pulumi.StringArrayOutput)
}

// Serial number to be used on the Certificate.
func (o CertificateSpecSubjectOutput) SerialNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateSpecSubject) *string { return v.SerialNumber }).(pulumi.StringPtrOutput)
}

// Street addresses to be used on the Certificate.
func (o CertificateSpecSubjectOutput) StreetAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func (v CertificateSpecSubject) []string { return v.StreetAddresses }).(pulumi.StringArrayOutput)
}

type CertificateSpecSubjectPtrOutput struct { *pulumi.OutputState }

func (CertificateSpecSubjectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSpecSubject)(nil)).Elem()
}

func (o CertificateSpecSubjectPtrOutput) ToCertificateSpecSubjectPtrOutput() CertificateSpecSubjectPtrOutput {
	return o
}

func (o CertificateSpecSubjectPtrOutput) ToCertificateSpecSubjectPtrOutputWithContext(ctx context.Context) CertificateSpecSubjectPtrOutput {
	return o
}

func (o CertificateSpecSubjectPtrOutput) Elem() CertificateSpecSubjectOutput {
	return o.ApplyT(func (v *CertificateSpecSubject) CertificateSpecSubject { return *v }).(CertificateSpecSubjectOutput)
}

// Countries to be used on the Certificate.
func (o CertificateSpecSubjectPtrOutput) Countries() pulumi.StringArrayOutput {
	return o.ApplyT(func (v *CertificateSpecSubject) []string {
		if v == nil {
			return nil
		}
		return v.Countries
	}).(pulumi.StringArrayOutput)
}

// Cities to be used on the Certificate.
func (o CertificateSpecSubjectPtrOutput) Localities() pulumi.StringArrayOutput {
	return o.ApplyT(func (v *CertificateSpecSubject) []string {
		if v == nil {
			return nil
		}
		return v.Localities
	}).(pulumi.StringArrayOutput)
}

// Organizational Units to be used on the Certificate.
func (o CertificateSpecSubjectPtrOutput) OrganizationalUnits() pulumi.StringArrayOutput {
	return o.ApplyT(func (v *CertificateSpecSubject) []string {
		if v == nil {
			return nil
		}
		return v.OrganizationalUnits
	}).(pulumi.StringArrayOutput)
}

// Organizations to be used on the Certificate.
func (o CertificateSpecSubjectPtrOutput) Organizations() pulumi.StringArrayOutput {
	return o.ApplyT(func (v *CertificateSpecSubject) []string {
		if v == nil {
			return nil
		}
		return v.Organizations
	}).(pulumi.StringArrayOutput)
}

// Postal codes to be used on the Certificate.
func (o CertificateSpecSubjectPtrOutput) PostalCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func (v *CertificateSpecSubject) []string {
		if v == nil {
			return nil
		}
		return v.PostalCodes
	}).(pulumi.StringArrayOutput)
}

// State/Provinces to be used on the Certificate.
func (o CertificateSpecSubjectPtrOutput) Provinces() pulumi.StringArrayOutput {
	return o.ApplyT(func (v *CertificateSpecSubject) []string {
		if v == nil {
			return nil
		}
		return v.Provinces
	}).(pulumi.StringArrayOutput)
}

// Serial number to be used on the Certificate.
func (o CertificateSpecSubjectPtrOutput) SerialNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func (v *CertificateSpecSubject) *string {
		if v == nil {
			return nil
		}
		return v.SerialNumber
	}).(pulumi.StringPtrOutput)
}

// Street addresses to be used on the Certificate.
func (o CertificateSpecSubjectPtrOutput) StreetAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func (v *CertificateSpecSubject) []string {
		if v == nil {
			return nil
		}
		return v.StreetAddresses
	}).(pulumi.StringArrayOutput)
}

// Status of the Certificate. This is set and managed automatically.
type CertificateStatus struct {
	// List of status conditions to indicate the status of certificates. Known condition types are `Ready` and `Issuing`.
	Conditions []CertificateStatusConditions `pulumi:"conditions"`
	// LastFailureTime is the time as recorded by the Certificate controller of the most recent failure to complete a CertificateRequest for this Certificate resource. If set, cert-manager will not re-request another Certificate until 1 hour has elapsed from this time.
	LastFailureTime *string `pulumi:"lastFailureTime"`
	// The name of the Secret resource containing the private key to be used for the next certificate iteration. The keymanager controller will automatically set this field if the `Issuing` condition is set to `True`. It will automatically unset this field when the Issuing condition is not set or False.
	NextPrivateKeySecretName *string `pulumi:"nextPrivateKeySecretName"`
	// The expiration time of the certificate stored in the secret named by this resource in `spec.secretName`.
	NotAfter *string `pulumi:"notAfter"`
	// The time after which the certificate stored in the secret named by this resource in spec.secretName is valid.
	NotBefore *string `pulumi:"notBefore"`
	// RenewalTime is the time at which the certificate will be next renewed. If not set, no upcoming renewal is scheduled.
	RenewalTime *string `pulumi:"renewalTime"`
	// The current 'revision' of the certificate as issued.
	//  When a CertificateRequest resource is created, it will have the `cert-manager.io/certificate-revision` set to one greater than the current value of this field.
	//  Upon issuance, this field will be set to the value of the annotation on the CertificateRequest resource used to issue the certificate.
	//  Persisting the value on the CertificateRequest resource allows the certificates controller to know whether a request is part of an old issuance or if it is part of the ongoing revision's issuance by checking if the revision value in the annotation is greater than this field.
	Revision *int `pulumi:"revision"`
}

// CertificateStatusInput is an input type that accepts CertificateStatusArgs and CertificateStatusOutput values.
// You can construct a concrete instance of `CertificateStatusInput` via:
//
//          CertificateStatusArgs{...}
type CertificateStatusInput interface {
	pulumi.Input

	ToCertificateStatusOutput() CertificateStatusOutput
	ToCertificateStatusOutputWithContext(context.Context) CertificateStatusOutput
}

// Status of the Certificate. This is set and managed automatically.
type CertificateStatusArgs struct {
	// List of status conditions to indicate the status of certificates. Known condition types are `Ready` and `Issuing`.
	Conditions CertificateStatusConditionsArrayInput `pulumi:"conditions"`
	// LastFailureTime is the time as recorded by the Certificate controller of the most recent failure to complete a CertificateRequest for this Certificate resource. If set, cert-manager will not re-request another Certificate until 1 hour has elapsed from this time.
	LastFailureTime pulumi.StringPtrInput `pulumi:"lastFailureTime"`
	// The name of the Secret resource containing the private key to be used for the next certificate iteration. The keymanager controller will automatically set this field if the `Issuing` condition is set to `True`. It will automatically unset this field when the Issuing condition is not set or False.
	NextPrivateKeySecretName pulumi.StringPtrInput `pulumi:"nextPrivateKeySecretName"`
	// The expiration time of the certificate stored in the secret named by this resource in `spec.secretName`.
	NotAfter pulumi.StringPtrInput `pulumi:"notAfter"`
	// The time after which the certificate stored in the secret named by this resource in spec.secretName is valid.
	NotBefore pulumi.StringPtrInput `pulumi:"notBefore"`
	// RenewalTime is the time at which the certificate will be next renewed. If not set, no upcoming renewal is scheduled.
	RenewalTime pulumi.StringPtrInput `pulumi:"renewalTime"`
	// The current 'revision' of the certificate as issued.
	//  When a CertificateRequest resource is created, it will have the `cert-manager.io/certificate-revision` set to one greater than the current value of this field.
	//  Upon issuance, this field will be set to the value of the annotation on the CertificateRequest resource used to issue the certificate.
	//  Persisting the value on the CertificateRequest resource allows the certificates controller to know whether a request is part of an old issuance or if it is part of the ongoing revision's issuance by checking if the revision value in the annotation is greater than this field.
	Revision pulumi.IntPtrInput `pulumi:"revision"`
}

func (CertificateStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateStatus)(nil)).Elem()
}

func (i CertificateStatusArgs) ToCertificateStatusOutput() CertificateStatusOutput {
	return i.ToCertificateStatusOutputWithContext(context.Background())
}

func (i CertificateStatusArgs) ToCertificateStatusOutputWithContext(ctx context.Context) CertificateStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateStatusOutput)
}

func (i CertificateStatusArgs) ToCertificateStatusPtrOutput() CertificateStatusPtrOutput {
	return i.ToCertificateStatusPtrOutputWithContext(context.Background())
}

func (i CertificateStatusArgs) ToCertificateStatusPtrOutputWithContext(ctx context.Context) CertificateStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateStatusOutput).ToCertificateStatusPtrOutputWithContext(ctx)
}

// CertificateStatusPtrInput is an input type that accepts CertificateStatusArgs, CertificateStatusPtr and CertificateStatusPtrOutput values.
// You can construct a concrete instance of `CertificateStatusPtrInput` via:
//
//          CertificateStatusArgs{...}
//
//  or:
//
//          nil
type CertificateStatusPtrInput interface {
	pulumi.Input

	ToCertificateStatusPtrOutput() CertificateStatusPtrOutput
	ToCertificateStatusPtrOutputWithContext(context.Context) CertificateStatusPtrOutput
}

type certificateStatusPtrType CertificateStatusArgs

func CertificateStatusPtr(v *CertificateStatusArgs) CertificateStatusPtrInput {	return (*certificateStatusPtrType)(v)
}

func (*certificateStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateStatus)(nil)).Elem()
}

func (i *certificateStatusPtrType) ToCertificateStatusPtrOutput() CertificateStatusPtrOutput {
	return i.ToCertificateStatusPtrOutputWithContext(context.Background())
}

func (i *certificateStatusPtrType) ToCertificateStatusPtrOutputWithContext(ctx context.Context) CertificateStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateStatusPtrOutput)
}

// Status of the Certificate. This is set and managed automatically.
type CertificateStatusOutput struct { *pulumi.OutputState }

func (CertificateStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateStatus)(nil)).Elem()
}

func (o CertificateStatusOutput) ToCertificateStatusOutput() CertificateStatusOutput {
	return o
}

func (o CertificateStatusOutput) ToCertificateStatusOutputWithContext(ctx context.Context) CertificateStatusOutput {
	return o
}

func (o CertificateStatusOutput) ToCertificateStatusPtrOutput() CertificateStatusPtrOutput {
	return o.ToCertificateStatusPtrOutputWithContext(context.Background())
}

func (o CertificateStatusOutput) ToCertificateStatusPtrOutputWithContext(ctx context.Context) CertificateStatusPtrOutput {
	return o.ApplyT(func(v CertificateStatus) *CertificateStatus {
		return &v
	}).(CertificateStatusPtrOutput)
}
// List of status conditions to indicate the status of certificates. Known condition types are `Ready` and `Issuing`.
func (o CertificateStatusOutput) Conditions() CertificateStatusConditionsArrayOutput {
	return o.ApplyT(func (v CertificateStatus) []CertificateStatusConditions { return v.Conditions }).(CertificateStatusConditionsArrayOutput)
}

// LastFailureTime is the time as recorded by the Certificate controller of the most recent failure to complete a CertificateRequest for this Certificate resource. If set, cert-manager will not re-request another Certificate until 1 hour has elapsed from this time.
func (o CertificateStatusOutput) LastFailureTime() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateStatus) *string { return v.LastFailureTime }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource containing the private key to be used for the next certificate iteration. The keymanager controller will automatically set this field if the `Issuing` condition is set to `True`. It will automatically unset this field when the Issuing condition is not set or False.
func (o CertificateStatusOutput) NextPrivateKeySecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateStatus) *string { return v.NextPrivateKeySecretName }).(pulumi.StringPtrOutput)
}

// The expiration time of the certificate stored in the secret named by this resource in `spec.secretName`.
func (o CertificateStatusOutput) NotAfter() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateStatus) *string { return v.NotAfter }).(pulumi.StringPtrOutput)
}

// The time after which the certificate stored in the secret named by this resource in spec.secretName is valid.
func (o CertificateStatusOutput) NotBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateStatus) *string { return v.NotBefore }).(pulumi.StringPtrOutput)
}

// RenewalTime is the time at which the certificate will be next renewed. If not set, no upcoming renewal is scheduled.
func (o CertificateStatusOutput) RenewalTime() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateStatus) *string { return v.RenewalTime }).(pulumi.StringPtrOutput)
}

// The current 'revision' of the certificate as issued.
//  When a CertificateRequest resource is created, it will have the `cert-manager.io/certificate-revision` set to one greater than the current value of this field.
//  Upon issuance, this field will be set to the value of the annotation on the CertificateRequest resource used to issue the certificate.
//  Persisting the value on the CertificateRequest resource allows the certificates controller to know whether a request is part of an old issuance or if it is part of the ongoing revision's issuance by checking if the revision value in the annotation is greater than this field.
func (o CertificateStatusOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func (v CertificateStatus) *int { return v.Revision }).(pulumi.IntPtrOutput)
}

type CertificateStatusPtrOutput struct { *pulumi.OutputState }

func (CertificateStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateStatus)(nil)).Elem()
}

func (o CertificateStatusPtrOutput) ToCertificateStatusPtrOutput() CertificateStatusPtrOutput {
	return o
}

func (o CertificateStatusPtrOutput) ToCertificateStatusPtrOutputWithContext(ctx context.Context) CertificateStatusPtrOutput {
	return o
}

func (o CertificateStatusPtrOutput) Elem() CertificateStatusOutput {
	return o.ApplyT(func (v *CertificateStatus) CertificateStatus { return *v }).(CertificateStatusOutput)
}

// List of status conditions to indicate the status of certificates. Known condition types are `Ready` and `Issuing`.
func (o CertificateStatusPtrOutput) Conditions() CertificateStatusConditionsArrayOutput {
	return o.ApplyT(func (v *CertificateStatus) []CertificateStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(CertificateStatusConditionsArrayOutput)
}

// LastFailureTime is the time as recorded by the Certificate controller of the most recent failure to complete a CertificateRequest for this Certificate resource. If set, cert-manager will not re-request another Certificate until 1 hour has elapsed from this time.
func (o CertificateStatusPtrOutput) LastFailureTime() pulumi.StringPtrOutput {
	return o.ApplyT(func (v *CertificateStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastFailureTime
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource containing the private key to be used for the next certificate iteration. The keymanager controller will automatically set this field if the `Issuing` condition is set to `True`. It will automatically unset this field when the Issuing condition is not set or False.
func (o CertificateStatusPtrOutput) NextPrivateKeySecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func (v *CertificateStatus) *string {
		if v == nil {
			return nil
		}
		return v.NextPrivateKeySecretName
	}).(pulumi.StringPtrOutput)
}

// The expiration time of the certificate stored in the secret named by this resource in `spec.secretName`.
func (o CertificateStatusPtrOutput) NotAfter() pulumi.StringPtrOutput {
	return o.ApplyT(func (v *CertificateStatus) *string {
		if v == nil {
			return nil
		}
		return v.NotAfter
	}).(pulumi.StringPtrOutput)
}

// The time after which the certificate stored in the secret named by this resource in spec.secretName is valid.
func (o CertificateStatusPtrOutput) NotBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func (v *CertificateStatus) *string {
		if v == nil {
			return nil
		}
		return v.NotBefore
	}).(pulumi.StringPtrOutput)
}

// RenewalTime is the time at which the certificate will be next renewed. If not set, no upcoming renewal is scheduled.
func (o CertificateStatusPtrOutput) RenewalTime() pulumi.StringPtrOutput {
	return o.ApplyT(func (v *CertificateStatus) *string {
		if v == nil {
			return nil
		}
		return v.RenewalTime
	}).(pulumi.StringPtrOutput)
}

// The current 'revision' of the certificate as issued.
//  When a CertificateRequest resource is created, it will have the `cert-manager.io/certificate-revision` set to one greater than the current value of this field.
//  Upon issuance, this field will be set to the value of the annotation on the CertificateRequest resource used to issue the certificate.
//  Persisting the value on the CertificateRequest resource allows the certificates controller to know whether a request is part of an old issuance or if it is part of the ongoing revision's issuance by checking if the revision value in the annotation is greater than this field.
func (o CertificateStatusPtrOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func (v *CertificateStatus) *int {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.IntPtrOutput)
}

// CertificateCondition contains condition information for an Certificate.
type CertificateStatusConditions struct {
	// LastTransitionTime is the timestamp corresponding to the last status change of this condition.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Message is a human readable description of the details of the last transition, complementing reason.
	Message *string `pulumi:"message"`
	// Reason is a brief machine readable explanation for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of ('True', 'False', 'Unknown').
	Status string `pulumi:"status"`
	// Type of the condition, known values are ('Ready', `Issuing`).
	Type string `pulumi:"type"`
}

// CertificateStatusConditionsInput is an input type that accepts CertificateStatusConditionsArgs and CertificateStatusConditionsOutput values.
// You can construct a concrete instance of `CertificateStatusConditionsInput` via:
//
//          CertificateStatusConditionsArgs{...}
type CertificateStatusConditionsInput interface {
	pulumi.Input

	ToCertificateStatusConditionsOutput() CertificateStatusConditionsOutput
	ToCertificateStatusConditionsOutputWithContext(context.Context) CertificateStatusConditionsOutput
}

// CertificateCondition contains condition information for an Certificate.
type CertificateStatusConditionsArgs struct {
	// LastTransitionTime is the timestamp corresponding to the last status change of this condition.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Message is a human readable description of the details of the last transition, complementing reason.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Reason is a brief machine readable explanation for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of ('True', 'False', 'Unknown').
	Status pulumi.StringInput `pulumi:"status"`
	// Type of the condition, known values are ('Ready', `Issuing`).
	Type pulumi.StringInput `pulumi:"type"`
}

func (CertificateStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateStatusConditions)(nil)).Elem()
}

func (i CertificateStatusConditionsArgs) ToCertificateStatusConditionsOutput() CertificateStatusConditionsOutput {
	return i.ToCertificateStatusConditionsOutputWithContext(context.Background())
}

func (i CertificateStatusConditionsArgs) ToCertificateStatusConditionsOutputWithContext(ctx context.Context) CertificateStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateStatusConditionsOutput)
}

// CertificateStatusConditionsArrayInput is an input type that accepts CertificateStatusConditionsArray and CertificateStatusConditionsArrayOutput values.
// You can construct a concrete instance of `CertificateStatusConditionsArrayInput` via:
//
//          CertificateStatusConditionsArray{ CertificateStatusConditionsArgs{...} }
type CertificateStatusConditionsArrayInput interface {
	pulumi.Input

	ToCertificateStatusConditionsArrayOutput() CertificateStatusConditionsArrayOutput
	ToCertificateStatusConditionsArrayOutputWithContext(context.Context) CertificateStatusConditionsArrayOutput
}

type CertificateStatusConditionsArray []CertificateStatusConditionsInput

func (CertificateStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateStatusConditions)(nil)).Elem()
}

func (i CertificateStatusConditionsArray) ToCertificateStatusConditionsArrayOutput() CertificateStatusConditionsArrayOutput {
	return i.ToCertificateStatusConditionsArrayOutputWithContext(context.Background())
}

func (i CertificateStatusConditionsArray) ToCertificateStatusConditionsArrayOutputWithContext(ctx context.Context) CertificateStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateStatusConditionsArrayOutput)
}

// CertificateCondition contains condition information for an Certificate.
type CertificateStatusConditionsOutput struct { *pulumi.OutputState }

func (CertificateStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateStatusConditions)(nil)).Elem()
}

func (o CertificateStatusConditionsOutput) ToCertificateStatusConditionsOutput() CertificateStatusConditionsOutput {
	return o
}

func (o CertificateStatusConditionsOutput) ToCertificateStatusConditionsOutputWithContext(ctx context.Context) CertificateStatusConditionsOutput {
	return o
}

// LastTransitionTime is the timestamp corresponding to the last status change of this condition.
func (o CertificateStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Message is a human readable description of the details of the last transition, complementing reason.
func (o CertificateStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Reason is a brief machine readable explanation for the condition's last transition.
func (o CertificateStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func (v CertificateStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of ('True', 'False', 'Unknown').
func (o CertificateStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func (v CertificateStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of the condition, known values are ('Ready', `Issuing`).
func (o CertificateStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func (v CertificateStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type CertificateStatusConditionsArrayOutput struct { *pulumi.OutputState }

func (CertificateStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateStatusConditions)(nil)).Elem()
}

func (o CertificateStatusConditionsArrayOutput) ToCertificateStatusConditionsArrayOutput() CertificateStatusConditionsArrayOutput {
	return o
}

func (o CertificateStatusConditionsArrayOutput) ToCertificateStatusConditionsArrayOutputWithContext(ctx context.Context) CertificateStatusConditionsArrayOutput {
	return o
}

func (o CertificateStatusConditionsArrayOutput) Index(i pulumi.IntInput) CertificateStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) CertificateStatusConditions {
		return vs[0].([]CertificateStatusConditions)[vs[1].(int)]
	}).(CertificateStatusConditionsOutput)
}

func init() {
	pulumi.RegisterOutputType(CertificateTypeOutput{})
	pulumi.RegisterOutputType(CertificateSpecOutput{})
	pulumi.RegisterOutputType(CertificateSpecPtrOutput{})
	pulumi.RegisterOutputType(CertificateSpecIssuerRefOutput{})
	pulumi.RegisterOutputType(CertificateSpecIssuerRefPtrOutput{})
	pulumi.RegisterOutputType(CertificateSpecKeystoresOutput{})
	pulumi.RegisterOutputType(CertificateSpecKeystoresPtrOutput{})
	pulumi.RegisterOutputType(CertificateSpecKeystoresJksOutput{})
	pulumi.RegisterOutputType(CertificateSpecKeystoresJksPtrOutput{})
	pulumi.RegisterOutputType(CertificateSpecKeystoresJksPasswordSecretRefOutput{})
	pulumi.RegisterOutputType(CertificateSpecKeystoresJksPasswordSecretRefPtrOutput{})
	pulumi.RegisterOutputType(CertificateSpecKeystoresPkcs12Output{})
	pulumi.RegisterOutputType(CertificateSpecKeystoresPkcs12PtrOutput{})
	pulumi.RegisterOutputType(CertificateSpecKeystoresPkcs12PasswordSecretRefOutput{})
	pulumi.RegisterOutputType(CertificateSpecKeystoresPkcs12PasswordSecretRefPtrOutput{})
	pulumi.RegisterOutputType(CertificateSpecPrivateKeyOutput{})
	pulumi.RegisterOutputType(CertificateSpecPrivateKeyPtrOutput{})
	pulumi.RegisterOutputType(CertificateSpecSubjectOutput{})
	pulumi.RegisterOutputType(CertificateSpecSubjectPtrOutput{})
	pulumi.RegisterOutputType(CertificateStatusOutput{})
	pulumi.RegisterOutputType(CertificateStatusPtrOutput{})
	pulumi.RegisterOutputType(CertificateStatusConditionsOutput{})
	pulumi.RegisterOutputType(CertificateStatusConditionsArrayOutput{})
}
